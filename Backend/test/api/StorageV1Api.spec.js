/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Kubernetes);
  }
}(this, function(expect, Kubernetes) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Kubernetes.StorageV1Api();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('StorageV1Api', function() {
    describe('createStorageV1CSIDriver', function() {
      it('should call createStorageV1CSIDriver successfully', function(done) {
        //uncomment below and update the code to test createStorageV1CSIDriver
        //instance.createStorageV1CSIDriver(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createStorageV1CSINode', function() {
      it('should call createStorageV1CSINode successfully', function(done) {
        //uncomment below and update the code to test createStorageV1CSINode
        //instance.createStorageV1CSINode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createStorageV1NamespacedCSIStorageCapacity', function() {
      it('should call createStorageV1NamespacedCSIStorageCapacity successfully', function(done) {
        //uncomment below and update the code to test createStorageV1NamespacedCSIStorageCapacity
        //instance.createStorageV1NamespacedCSIStorageCapacity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createStorageV1StorageClass', function() {
      it('should call createStorageV1StorageClass successfully', function(done) {
        //uncomment below and update the code to test createStorageV1StorageClass
        //instance.createStorageV1StorageClass(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createStorageV1VolumeAttachment', function() {
      it('should call createStorageV1VolumeAttachment successfully', function(done) {
        //uncomment below and update the code to test createStorageV1VolumeAttachment
        //instance.createStorageV1VolumeAttachment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteStorageV1CSIDriver', function() {
      it('should call deleteStorageV1CSIDriver successfully', function(done) {
        //uncomment below and update the code to test deleteStorageV1CSIDriver
        //instance.deleteStorageV1CSIDriver(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteStorageV1CSINode', function() {
      it('should call deleteStorageV1CSINode successfully', function(done) {
        //uncomment below and update the code to test deleteStorageV1CSINode
        //instance.deleteStorageV1CSINode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteStorageV1CollectionCSIDriver', function() {
      it('should call deleteStorageV1CollectionCSIDriver successfully', function(done) {
        //uncomment below and update the code to test deleteStorageV1CollectionCSIDriver
        //instance.deleteStorageV1CollectionCSIDriver(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteStorageV1CollectionCSINode', function() {
      it('should call deleteStorageV1CollectionCSINode successfully', function(done) {
        //uncomment below and update the code to test deleteStorageV1CollectionCSINode
        //instance.deleteStorageV1CollectionCSINode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteStorageV1CollectionNamespacedCSIStorageCapacity', function() {
      it('should call deleteStorageV1CollectionNamespacedCSIStorageCapacity successfully', function(done) {
        //uncomment below and update the code to test deleteStorageV1CollectionNamespacedCSIStorageCapacity
        //instance.deleteStorageV1CollectionNamespacedCSIStorageCapacity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteStorageV1CollectionStorageClass', function() {
      it('should call deleteStorageV1CollectionStorageClass successfully', function(done) {
        //uncomment below and update the code to test deleteStorageV1CollectionStorageClass
        //instance.deleteStorageV1CollectionStorageClass(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteStorageV1CollectionVolumeAttachment', function() {
      it('should call deleteStorageV1CollectionVolumeAttachment successfully', function(done) {
        //uncomment below and update the code to test deleteStorageV1CollectionVolumeAttachment
        //instance.deleteStorageV1CollectionVolumeAttachment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteStorageV1NamespacedCSIStorageCapacity', function() {
      it('should call deleteStorageV1NamespacedCSIStorageCapacity successfully', function(done) {
        //uncomment below and update the code to test deleteStorageV1NamespacedCSIStorageCapacity
        //instance.deleteStorageV1NamespacedCSIStorageCapacity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteStorageV1StorageClass', function() {
      it('should call deleteStorageV1StorageClass successfully', function(done) {
        //uncomment below and update the code to test deleteStorageV1StorageClass
        //instance.deleteStorageV1StorageClass(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteStorageV1VolumeAttachment', function() {
      it('should call deleteStorageV1VolumeAttachment successfully', function(done) {
        //uncomment below and update the code to test deleteStorageV1VolumeAttachment
        //instance.deleteStorageV1VolumeAttachment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStorageV1APIResources', function() {
      it('should call getStorageV1APIResources successfully', function(done) {
        //uncomment below and update the code to test getStorageV1APIResources
        //instance.getStorageV1APIResources(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listStorageV1CSIDriver', function() {
      it('should call listStorageV1CSIDriver successfully', function(done) {
        //uncomment below and update the code to test listStorageV1CSIDriver
        //instance.listStorageV1CSIDriver(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listStorageV1CSINode', function() {
      it('should call listStorageV1CSINode successfully', function(done) {
        //uncomment below and update the code to test listStorageV1CSINode
        //instance.listStorageV1CSINode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listStorageV1CSIStorageCapacityForAllNamespaces', function() {
      it('should call listStorageV1CSIStorageCapacityForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listStorageV1CSIStorageCapacityForAllNamespaces
        //instance.listStorageV1CSIStorageCapacityForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listStorageV1NamespacedCSIStorageCapacity', function() {
      it('should call listStorageV1NamespacedCSIStorageCapacity successfully', function(done) {
        //uncomment below and update the code to test listStorageV1NamespacedCSIStorageCapacity
        //instance.listStorageV1NamespacedCSIStorageCapacity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listStorageV1StorageClass', function() {
      it('should call listStorageV1StorageClass successfully', function(done) {
        //uncomment below and update the code to test listStorageV1StorageClass
        //instance.listStorageV1StorageClass(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listStorageV1VolumeAttachment', function() {
      it('should call listStorageV1VolumeAttachment successfully', function(done) {
        //uncomment below and update the code to test listStorageV1VolumeAttachment
        //instance.listStorageV1VolumeAttachment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchStorageV1CSIDriver', function() {
      it('should call patchStorageV1CSIDriver successfully', function(done) {
        //uncomment below and update the code to test patchStorageV1CSIDriver
        //instance.patchStorageV1CSIDriver(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchStorageV1CSINode', function() {
      it('should call patchStorageV1CSINode successfully', function(done) {
        //uncomment below and update the code to test patchStorageV1CSINode
        //instance.patchStorageV1CSINode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchStorageV1NamespacedCSIStorageCapacity', function() {
      it('should call patchStorageV1NamespacedCSIStorageCapacity successfully', function(done) {
        //uncomment below and update the code to test patchStorageV1NamespacedCSIStorageCapacity
        //instance.patchStorageV1NamespacedCSIStorageCapacity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchStorageV1StorageClass', function() {
      it('should call patchStorageV1StorageClass successfully', function(done) {
        //uncomment below and update the code to test patchStorageV1StorageClass
        //instance.patchStorageV1StorageClass(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchStorageV1VolumeAttachment', function() {
      it('should call patchStorageV1VolumeAttachment successfully', function(done) {
        //uncomment below and update the code to test patchStorageV1VolumeAttachment
        //instance.patchStorageV1VolumeAttachment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchStorageV1VolumeAttachmentStatus', function() {
      it('should call patchStorageV1VolumeAttachmentStatus successfully', function(done) {
        //uncomment below and update the code to test patchStorageV1VolumeAttachmentStatus
        //instance.patchStorageV1VolumeAttachmentStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readStorageV1CSIDriver', function() {
      it('should call readStorageV1CSIDriver successfully', function(done) {
        //uncomment below and update the code to test readStorageV1CSIDriver
        //instance.readStorageV1CSIDriver(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readStorageV1CSINode', function() {
      it('should call readStorageV1CSINode successfully', function(done) {
        //uncomment below and update the code to test readStorageV1CSINode
        //instance.readStorageV1CSINode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readStorageV1NamespacedCSIStorageCapacity', function() {
      it('should call readStorageV1NamespacedCSIStorageCapacity successfully', function(done) {
        //uncomment below and update the code to test readStorageV1NamespacedCSIStorageCapacity
        //instance.readStorageV1NamespacedCSIStorageCapacity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readStorageV1StorageClass', function() {
      it('should call readStorageV1StorageClass successfully', function(done) {
        //uncomment below and update the code to test readStorageV1StorageClass
        //instance.readStorageV1StorageClass(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readStorageV1VolumeAttachment', function() {
      it('should call readStorageV1VolumeAttachment successfully', function(done) {
        //uncomment below and update the code to test readStorageV1VolumeAttachment
        //instance.readStorageV1VolumeAttachment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readStorageV1VolumeAttachmentStatus', function() {
      it('should call readStorageV1VolumeAttachmentStatus successfully', function(done) {
        //uncomment below and update the code to test readStorageV1VolumeAttachmentStatus
        //instance.readStorageV1VolumeAttachmentStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceStorageV1CSIDriver', function() {
      it('should call replaceStorageV1CSIDriver successfully', function(done) {
        //uncomment below and update the code to test replaceStorageV1CSIDriver
        //instance.replaceStorageV1CSIDriver(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceStorageV1CSINode', function() {
      it('should call replaceStorageV1CSINode successfully', function(done) {
        //uncomment below and update the code to test replaceStorageV1CSINode
        //instance.replaceStorageV1CSINode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceStorageV1NamespacedCSIStorageCapacity', function() {
      it('should call replaceStorageV1NamespacedCSIStorageCapacity successfully', function(done) {
        //uncomment below and update the code to test replaceStorageV1NamespacedCSIStorageCapacity
        //instance.replaceStorageV1NamespacedCSIStorageCapacity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceStorageV1StorageClass', function() {
      it('should call replaceStorageV1StorageClass successfully', function(done) {
        //uncomment below and update the code to test replaceStorageV1StorageClass
        //instance.replaceStorageV1StorageClass(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceStorageV1VolumeAttachment', function() {
      it('should call replaceStorageV1VolumeAttachment successfully', function(done) {
        //uncomment below and update the code to test replaceStorageV1VolumeAttachment
        //instance.replaceStorageV1VolumeAttachment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceStorageV1VolumeAttachmentStatus', function() {
      it('should call replaceStorageV1VolumeAttachmentStatus successfully', function(done) {
        //uncomment below and update the code to test replaceStorageV1VolumeAttachmentStatus
        //instance.replaceStorageV1VolumeAttachmentStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchStorageV1CSIDriver', function() {
      it('should call watchStorageV1CSIDriver successfully', function(done) {
        //uncomment below and update the code to test watchStorageV1CSIDriver
        //instance.watchStorageV1CSIDriver(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchStorageV1CSIDriverList', function() {
      it('should call watchStorageV1CSIDriverList successfully', function(done) {
        //uncomment below and update the code to test watchStorageV1CSIDriverList
        //instance.watchStorageV1CSIDriverList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchStorageV1CSINode', function() {
      it('should call watchStorageV1CSINode successfully', function(done) {
        //uncomment below and update the code to test watchStorageV1CSINode
        //instance.watchStorageV1CSINode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchStorageV1CSINodeList', function() {
      it('should call watchStorageV1CSINodeList successfully', function(done) {
        //uncomment below and update the code to test watchStorageV1CSINodeList
        //instance.watchStorageV1CSINodeList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchStorageV1CSIStorageCapacityListForAllNamespaces', function() {
      it('should call watchStorageV1CSIStorageCapacityListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchStorageV1CSIStorageCapacityListForAllNamespaces
        //instance.watchStorageV1CSIStorageCapacityListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchStorageV1NamespacedCSIStorageCapacity', function() {
      it('should call watchStorageV1NamespacedCSIStorageCapacity successfully', function(done) {
        //uncomment below and update the code to test watchStorageV1NamespacedCSIStorageCapacity
        //instance.watchStorageV1NamespacedCSIStorageCapacity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchStorageV1NamespacedCSIStorageCapacityList', function() {
      it('should call watchStorageV1NamespacedCSIStorageCapacityList successfully', function(done) {
        //uncomment below and update the code to test watchStorageV1NamespacedCSIStorageCapacityList
        //instance.watchStorageV1NamespacedCSIStorageCapacityList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchStorageV1StorageClass', function() {
      it('should call watchStorageV1StorageClass successfully', function(done) {
        //uncomment below and update the code to test watchStorageV1StorageClass
        //instance.watchStorageV1StorageClass(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchStorageV1StorageClassList', function() {
      it('should call watchStorageV1StorageClassList successfully', function(done) {
        //uncomment below and update the code to test watchStorageV1StorageClassList
        //instance.watchStorageV1StorageClassList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchStorageV1VolumeAttachment', function() {
      it('should call watchStorageV1VolumeAttachment successfully', function(done) {
        //uncomment below and update the code to test watchStorageV1VolumeAttachment
        //instance.watchStorageV1VolumeAttachment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchStorageV1VolumeAttachmentList', function() {
      it('should call watchStorageV1VolumeAttachmentList successfully', function(done) {
        //uncomment below and update the code to test watchStorageV1VolumeAttachmentList
        //instance.watchStorageV1VolumeAttachmentList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
