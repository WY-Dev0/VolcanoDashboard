/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Kubernetes);
  }
}(this, function(expect, Kubernetes) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Kubernetes.NetworkingV1Api();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NetworkingV1Api', function() {
    describe('createNetworkingV1IngressClass', function() {
      it('should call createNetworkingV1IngressClass successfully', function(done) {
        //uncomment below and update the code to test createNetworkingV1IngressClass
        //instance.createNetworkingV1IngressClass(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNetworkingV1NamespacedIngress', function() {
      it('should call createNetworkingV1NamespacedIngress successfully', function(done) {
        //uncomment below and update the code to test createNetworkingV1NamespacedIngress
        //instance.createNetworkingV1NamespacedIngress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNetworkingV1NamespacedNetworkPolicy', function() {
      it('should call createNetworkingV1NamespacedNetworkPolicy successfully', function(done) {
        //uncomment below and update the code to test createNetworkingV1NamespacedNetworkPolicy
        //instance.createNetworkingV1NamespacedNetworkPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNetworkingV1CollectionIngressClass', function() {
      it('should call deleteNetworkingV1CollectionIngressClass successfully', function(done) {
        //uncomment below and update the code to test deleteNetworkingV1CollectionIngressClass
        //instance.deleteNetworkingV1CollectionIngressClass(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNetworkingV1CollectionNamespacedIngress', function() {
      it('should call deleteNetworkingV1CollectionNamespacedIngress successfully', function(done) {
        //uncomment below and update the code to test deleteNetworkingV1CollectionNamespacedIngress
        //instance.deleteNetworkingV1CollectionNamespacedIngress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNetworkingV1CollectionNamespacedNetworkPolicy', function() {
      it('should call deleteNetworkingV1CollectionNamespacedNetworkPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteNetworkingV1CollectionNamespacedNetworkPolicy
        //instance.deleteNetworkingV1CollectionNamespacedNetworkPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNetworkingV1IngressClass', function() {
      it('should call deleteNetworkingV1IngressClass successfully', function(done) {
        //uncomment below and update the code to test deleteNetworkingV1IngressClass
        //instance.deleteNetworkingV1IngressClass(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNetworkingV1NamespacedIngress', function() {
      it('should call deleteNetworkingV1NamespacedIngress successfully', function(done) {
        //uncomment below and update the code to test deleteNetworkingV1NamespacedIngress
        //instance.deleteNetworkingV1NamespacedIngress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNetworkingV1NamespacedNetworkPolicy', function() {
      it('should call deleteNetworkingV1NamespacedNetworkPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteNetworkingV1NamespacedNetworkPolicy
        //instance.deleteNetworkingV1NamespacedNetworkPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNetworkingV1APIResources', function() {
      it('should call getNetworkingV1APIResources successfully', function(done) {
        //uncomment below and update the code to test getNetworkingV1APIResources
        //instance.getNetworkingV1APIResources(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNetworkingV1IngressClass', function() {
      it('should call listNetworkingV1IngressClass successfully', function(done) {
        //uncomment below and update the code to test listNetworkingV1IngressClass
        //instance.listNetworkingV1IngressClass(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNetworkingV1IngressForAllNamespaces', function() {
      it('should call listNetworkingV1IngressForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listNetworkingV1IngressForAllNamespaces
        //instance.listNetworkingV1IngressForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNetworkingV1NamespacedIngress', function() {
      it('should call listNetworkingV1NamespacedIngress successfully', function(done) {
        //uncomment below and update the code to test listNetworkingV1NamespacedIngress
        //instance.listNetworkingV1NamespacedIngress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNetworkingV1NamespacedNetworkPolicy', function() {
      it('should call listNetworkingV1NamespacedNetworkPolicy successfully', function(done) {
        //uncomment below and update the code to test listNetworkingV1NamespacedNetworkPolicy
        //instance.listNetworkingV1NamespacedNetworkPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNetworkingV1NetworkPolicyForAllNamespaces', function() {
      it('should call listNetworkingV1NetworkPolicyForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listNetworkingV1NetworkPolicyForAllNamespaces
        //instance.listNetworkingV1NetworkPolicyForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNetworkingV1IngressClass', function() {
      it('should call patchNetworkingV1IngressClass successfully', function(done) {
        //uncomment below and update the code to test patchNetworkingV1IngressClass
        //instance.patchNetworkingV1IngressClass(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNetworkingV1NamespacedIngress', function() {
      it('should call patchNetworkingV1NamespacedIngress successfully', function(done) {
        //uncomment below and update the code to test patchNetworkingV1NamespacedIngress
        //instance.patchNetworkingV1NamespacedIngress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNetworkingV1NamespacedIngressStatus', function() {
      it('should call patchNetworkingV1NamespacedIngressStatus successfully', function(done) {
        //uncomment below and update the code to test patchNetworkingV1NamespacedIngressStatus
        //instance.patchNetworkingV1NamespacedIngressStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNetworkingV1NamespacedNetworkPolicy', function() {
      it('should call patchNetworkingV1NamespacedNetworkPolicy successfully', function(done) {
        //uncomment below and update the code to test patchNetworkingV1NamespacedNetworkPolicy
        //instance.patchNetworkingV1NamespacedNetworkPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNetworkingV1IngressClass', function() {
      it('should call readNetworkingV1IngressClass successfully', function(done) {
        //uncomment below and update the code to test readNetworkingV1IngressClass
        //instance.readNetworkingV1IngressClass(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNetworkingV1NamespacedIngress', function() {
      it('should call readNetworkingV1NamespacedIngress successfully', function(done) {
        //uncomment below and update the code to test readNetworkingV1NamespacedIngress
        //instance.readNetworkingV1NamespacedIngress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNetworkingV1NamespacedIngressStatus', function() {
      it('should call readNetworkingV1NamespacedIngressStatus successfully', function(done) {
        //uncomment below and update the code to test readNetworkingV1NamespacedIngressStatus
        //instance.readNetworkingV1NamespacedIngressStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNetworkingV1NamespacedNetworkPolicy', function() {
      it('should call readNetworkingV1NamespacedNetworkPolicy successfully', function(done) {
        //uncomment below and update the code to test readNetworkingV1NamespacedNetworkPolicy
        //instance.readNetworkingV1NamespacedNetworkPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNetworkingV1IngressClass', function() {
      it('should call replaceNetworkingV1IngressClass successfully', function(done) {
        //uncomment below and update the code to test replaceNetworkingV1IngressClass
        //instance.replaceNetworkingV1IngressClass(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNetworkingV1NamespacedIngress', function() {
      it('should call replaceNetworkingV1NamespacedIngress successfully', function(done) {
        //uncomment below and update the code to test replaceNetworkingV1NamespacedIngress
        //instance.replaceNetworkingV1NamespacedIngress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNetworkingV1NamespacedIngressStatus', function() {
      it('should call replaceNetworkingV1NamespacedIngressStatus successfully', function(done) {
        //uncomment below and update the code to test replaceNetworkingV1NamespacedIngressStatus
        //instance.replaceNetworkingV1NamespacedIngressStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNetworkingV1NamespacedNetworkPolicy', function() {
      it('should call replaceNetworkingV1NamespacedNetworkPolicy successfully', function(done) {
        //uncomment below and update the code to test replaceNetworkingV1NamespacedNetworkPolicy
        //instance.replaceNetworkingV1NamespacedNetworkPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNetworkingV1IngressClass', function() {
      it('should call watchNetworkingV1IngressClass successfully', function(done) {
        //uncomment below and update the code to test watchNetworkingV1IngressClass
        //instance.watchNetworkingV1IngressClass(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNetworkingV1IngressClassList', function() {
      it('should call watchNetworkingV1IngressClassList successfully', function(done) {
        //uncomment below and update the code to test watchNetworkingV1IngressClassList
        //instance.watchNetworkingV1IngressClassList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNetworkingV1IngressListForAllNamespaces', function() {
      it('should call watchNetworkingV1IngressListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchNetworkingV1IngressListForAllNamespaces
        //instance.watchNetworkingV1IngressListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNetworkingV1NamespacedIngress', function() {
      it('should call watchNetworkingV1NamespacedIngress successfully', function(done) {
        //uncomment below and update the code to test watchNetworkingV1NamespacedIngress
        //instance.watchNetworkingV1NamespacedIngress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNetworkingV1NamespacedIngressList', function() {
      it('should call watchNetworkingV1NamespacedIngressList successfully', function(done) {
        //uncomment below and update the code to test watchNetworkingV1NamespacedIngressList
        //instance.watchNetworkingV1NamespacedIngressList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNetworkingV1NamespacedNetworkPolicy', function() {
      it('should call watchNetworkingV1NamespacedNetworkPolicy successfully', function(done) {
        //uncomment below and update the code to test watchNetworkingV1NamespacedNetworkPolicy
        //instance.watchNetworkingV1NamespacedNetworkPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNetworkingV1NamespacedNetworkPolicyList', function() {
      it('should call watchNetworkingV1NamespacedNetworkPolicyList successfully', function(done) {
        //uncomment below and update the code to test watchNetworkingV1NamespacedNetworkPolicyList
        //instance.watchNetworkingV1NamespacedNetworkPolicyList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNetworkingV1NetworkPolicyListForAllNamespaces', function() {
      it('should call watchNetworkingV1NetworkPolicyListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchNetworkingV1NetworkPolicyListForAllNamespaces
        //instance.watchNetworkingV1NetworkPolicyListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
