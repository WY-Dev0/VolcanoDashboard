/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Kubernetes);
  }
}(this, function(expect, Kubernetes) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Kubernetes.CoreV1Api();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CoreV1Api', function() {
    describe('connectCoreV1DeleteNamespacedPodProxy', function() {
      it('should call connectCoreV1DeleteNamespacedPodProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1DeleteNamespacedPodProxy
        //instance.connectCoreV1DeleteNamespacedPodProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1DeleteNamespacedPodProxyWithPath', function() {
      it('should call connectCoreV1DeleteNamespacedPodProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1DeleteNamespacedPodProxyWithPath
        //instance.connectCoreV1DeleteNamespacedPodProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1DeleteNamespacedServiceProxy', function() {
      it('should call connectCoreV1DeleteNamespacedServiceProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1DeleteNamespacedServiceProxy
        //instance.connectCoreV1DeleteNamespacedServiceProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1DeleteNamespacedServiceProxyWithPath', function() {
      it('should call connectCoreV1DeleteNamespacedServiceProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1DeleteNamespacedServiceProxyWithPath
        //instance.connectCoreV1DeleteNamespacedServiceProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1DeleteNodeProxy', function() {
      it('should call connectCoreV1DeleteNodeProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1DeleteNodeProxy
        //instance.connectCoreV1DeleteNodeProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1DeleteNodeProxyWithPath', function() {
      it('should call connectCoreV1DeleteNodeProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1DeleteNodeProxyWithPath
        //instance.connectCoreV1DeleteNodeProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1GetNamespacedPodAttach', function() {
      it('should call connectCoreV1GetNamespacedPodAttach successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1GetNamespacedPodAttach
        //instance.connectCoreV1GetNamespacedPodAttach(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1GetNamespacedPodExec', function() {
      it('should call connectCoreV1GetNamespacedPodExec successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1GetNamespacedPodExec
        //instance.connectCoreV1GetNamespacedPodExec(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1GetNamespacedPodPortforward', function() {
      it('should call connectCoreV1GetNamespacedPodPortforward successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1GetNamespacedPodPortforward
        //instance.connectCoreV1GetNamespacedPodPortforward(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1GetNamespacedPodProxy', function() {
      it('should call connectCoreV1GetNamespacedPodProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1GetNamespacedPodProxy
        //instance.connectCoreV1GetNamespacedPodProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1GetNamespacedPodProxyWithPath', function() {
      it('should call connectCoreV1GetNamespacedPodProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1GetNamespacedPodProxyWithPath
        //instance.connectCoreV1GetNamespacedPodProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1GetNamespacedServiceProxy', function() {
      it('should call connectCoreV1GetNamespacedServiceProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1GetNamespacedServiceProxy
        //instance.connectCoreV1GetNamespacedServiceProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1GetNamespacedServiceProxyWithPath', function() {
      it('should call connectCoreV1GetNamespacedServiceProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1GetNamespacedServiceProxyWithPath
        //instance.connectCoreV1GetNamespacedServiceProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1GetNodeProxy', function() {
      it('should call connectCoreV1GetNodeProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1GetNodeProxy
        //instance.connectCoreV1GetNodeProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1GetNodeProxyWithPath', function() {
      it('should call connectCoreV1GetNodeProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1GetNodeProxyWithPath
        //instance.connectCoreV1GetNodeProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1HeadNamespacedPodProxy', function() {
      it('should call connectCoreV1HeadNamespacedPodProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1HeadNamespacedPodProxy
        //instance.connectCoreV1HeadNamespacedPodProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1HeadNamespacedPodProxyWithPath', function() {
      it('should call connectCoreV1HeadNamespacedPodProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1HeadNamespacedPodProxyWithPath
        //instance.connectCoreV1HeadNamespacedPodProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1HeadNamespacedServiceProxy', function() {
      it('should call connectCoreV1HeadNamespacedServiceProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1HeadNamespacedServiceProxy
        //instance.connectCoreV1HeadNamespacedServiceProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1HeadNamespacedServiceProxyWithPath', function() {
      it('should call connectCoreV1HeadNamespacedServiceProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1HeadNamespacedServiceProxyWithPath
        //instance.connectCoreV1HeadNamespacedServiceProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1HeadNodeProxy', function() {
      it('should call connectCoreV1HeadNodeProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1HeadNodeProxy
        //instance.connectCoreV1HeadNodeProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1HeadNodeProxyWithPath', function() {
      it('should call connectCoreV1HeadNodeProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1HeadNodeProxyWithPath
        //instance.connectCoreV1HeadNodeProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1OptionsNamespacedPodProxy', function() {
      it('should call connectCoreV1OptionsNamespacedPodProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1OptionsNamespacedPodProxy
        //instance.connectCoreV1OptionsNamespacedPodProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1OptionsNamespacedPodProxyWithPath', function() {
      it('should call connectCoreV1OptionsNamespacedPodProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1OptionsNamespacedPodProxyWithPath
        //instance.connectCoreV1OptionsNamespacedPodProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1OptionsNamespacedServiceProxy', function() {
      it('should call connectCoreV1OptionsNamespacedServiceProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1OptionsNamespacedServiceProxy
        //instance.connectCoreV1OptionsNamespacedServiceProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1OptionsNamespacedServiceProxyWithPath', function() {
      it('should call connectCoreV1OptionsNamespacedServiceProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1OptionsNamespacedServiceProxyWithPath
        //instance.connectCoreV1OptionsNamespacedServiceProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1OptionsNodeProxy', function() {
      it('should call connectCoreV1OptionsNodeProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1OptionsNodeProxy
        //instance.connectCoreV1OptionsNodeProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1OptionsNodeProxyWithPath', function() {
      it('should call connectCoreV1OptionsNodeProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1OptionsNodeProxyWithPath
        //instance.connectCoreV1OptionsNodeProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PatchNamespacedPodProxy', function() {
      it('should call connectCoreV1PatchNamespacedPodProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PatchNamespacedPodProxy
        //instance.connectCoreV1PatchNamespacedPodProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PatchNamespacedPodProxyWithPath', function() {
      it('should call connectCoreV1PatchNamespacedPodProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PatchNamespacedPodProxyWithPath
        //instance.connectCoreV1PatchNamespacedPodProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PatchNamespacedServiceProxy', function() {
      it('should call connectCoreV1PatchNamespacedServiceProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PatchNamespacedServiceProxy
        //instance.connectCoreV1PatchNamespacedServiceProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PatchNamespacedServiceProxyWithPath', function() {
      it('should call connectCoreV1PatchNamespacedServiceProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PatchNamespacedServiceProxyWithPath
        //instance.connectCoreV1PatchNamespacedServiceProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PatchNodeProxy', function() {
      it('should call connectCoreV1PatchNodeProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PatchNodeProxy
        //instance.connectCoreV1PatchNodeProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PatchNodeProxyWithPath', function() {
      it('should call connectCoreV1PatchNodeProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PatchNodeProxyWithPath
        //instance.connectCoreV1PatchNodeProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PostNamespacedPodAttach', function() {
      it('should call connectCoreV1PostNamespacedPodAttach successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PostNamespacedPodAttach
        //instance.connectCoreV1PostNamespacedPodAttach(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PostNamespacedPodExec', function() {
      it('should call connectCoreV1PostNamespacedPodExec successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PostNamespacedPodExec
        //instance.connectCoreV1PostNamespacedPodExec(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PostNamespacedPodPortforward', function() {
      it('should call connectCoreV1PostNamespacedPodPortforward successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PostNamespacedPodPortforward
        //instance.connectCoreV1PostNamespacedPodPortforward(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PostNamespacedPodProxy', function() {
      it('should call connectCoreV1PostNamespacedPodProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PostNamespacedPodProxy
        //instance.connectCoreV1PostNamespacedPodProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PostNamespacedPodProxyWithPath', function() {
      it('should call connectCoreV1PostNamespacedPodProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PostNamespacedPodProxyWithPath
        //instance.connectCoreV1PostNamespacedPodProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PostNamespacedServiceProxy', function() {
      it('should call connectCoreV1PostNamespacedServiceProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PostNamespacedServiceProxy
        //instance.connectCoreV1PostNamespacedServiceProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PostNamespacedServiceProxyWithPath', function() {
      it('should call connectCoreV1PostNamespacedServiceProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PostNamespacedServiceProxyWithPath
        //instance.connectCoreV1PostNamespacedServiceProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PostNodeProxy', function() {
      it('should call connectCoreV1PostNodeProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PostNodeProxy
        //instance.connectCoreV1PostNodeProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PostNodeProxyWithPath', function() {
      it('should call connectCoreV1PostNodeProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PostNodeProxyWithPath
        //instance.connectCoreV1PostNodeProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PutNamespacedPodProxy', function() {
      it('should call connectCoreV1PutNamespacedPodProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PutNamespacedPodProxy
        //instance.connectCoreV1PutNamespacedPodProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PutNamespacedPodProxyWithPath', function() {
      it('should call connectCoreV1PutNamespacedPodProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PutNamespacedPodProxyWithPath
        //instance.connectCoreV1PutNamespacedPodProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PutNamespacedServiceProxy', function() {
      it('should call connectCoreV1PutNamespacedServiceProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PutNamespacedServiceProxy
        //instance.connectCoreV1PutNamespacedServiceProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PutNamespacedServiceProxyWithPath', function() {
      it('should call connectCoreV1PutNamespacedServiceProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PutNamespacedServiceProxyWithPath
        //instance.connectCoreV1PutNamespacedServiceProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PutNodeProxy', function() {
      it('should call connectCoreV1PutNodeProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PutNodeProxy
        //instance.connectCoreV1PutNodeProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PutNodeProxyWithPath', function() {
      it('should call connectCoreV1PutNodeProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PutNodeProxyWithPath
        //instance.connectCoreV1PutNodeProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1Namespace', function() {
      it('should call createCoreV1Namespace successfully', function(done) {
        //uncomment below and update the code to test createCoreV1Namespace
        //instance.createCoreV1Namespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedBinding', function() {
      it('should call createCoreV1NamespacedBinding successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedBinding
        //instance.createCoreV1NamespacedBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedConfigMap', function() {
      it('should call createCoreV1NamespacedConfigMap successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedConfigMap
        //instance.createCoreV1NamespacedConfigMap(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedEndpoints', function() {
      it('should call createCoreV1NamespacedEndpoints successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedEndpoints
        //instance.createCoreV1NamespacedEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedEvent', function() {
      it('should call createCoreV1NamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedEvent
        //instance.createCoreV1NamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedLimitRange', function() {
      it('should call createCoreV1NamespacedLimitRange successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedLimitRange
        //instance.createCoreV1NamespacedLimitRange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedPersistentVolumeClaim', function() {
      it('should call createCoreV1NamespacedPersistentVolumeClaim successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedPersistentVolumeClaim
        //instance.createCoreV1NamespacedPersistentVolumeClaim(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedPod', function() {
      it('should call createCoreV1NamespacedPod successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedPod
        //instance.createCoreV1NamespacedPod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedPodBinding', function() {
      it('should call createCoreV1NamespacedPodBinding successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedPodBinding
        //instance.createCoreV1NamespacedPodBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedPodEviction', function() {
      it('should call createCoreV1NamespacedPodEviction successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedPodEviction
        //instance.createCoreV1NamespacedPodEviction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedPodTemplate', function() {
      it('should call createCoreV1NamespacedPodTemplate successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedPodTemplate
        //instance.createCoreV1NamespacedPodTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedReplicationController', function() {
      it('should call createCoreV1NamespacedReplicationController successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedReplicationController
        //instance.createCoreV1NamespacedReplicationController(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedResourceQuota', function() {
      it('should call createCoreV1NamespacedResourceQuota successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedResourceQuota
        //instance.createCoreV1NamespacedResourceQuota(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedSecret', function() {
      it('should call createCoreV1NamespacedSecret successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedSecret
        //instance.createCoreV1NamespacedSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedService', function() {
      it('should call createCoreV1NamespacedService successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedService
        //instance.createCoreV1NamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedServiceAccount', function() {
      it('should call createCoreV1NamespacedServiceAccount successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedServiceAccount
        //instance.createCoreV1NamespacedServiceAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedServiceAccountToken', function() {
      it('should call createCoreV1NamespacedServiceAccountToken successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedServiceAccountToken
        //instance.createCoreV1NamespacedServiceAccountToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1Node', function() {
      it('should call createCoreV1Node successfully', function(done) {
        //uncomment below and update the code to test createCoreV1Node
        //instance.createCoreV1Node(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1PersistentVolume', function() {
      it('should call createCoreV1PersistentVolume successfully', function(done) {
        //uncomment below and update the code to test createCoreV1PersistentVolume
        //instance.createCoreV1PersistentVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionNamespacedConfigMap', function() {
      it('should call deleteCoreV1CollectionNamespacedConfigMap successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionNamespacedConfigMap
        //instance.deleteCoreV1CollectionNamespacedConfigMap(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionNamespacedEndpoints', function() {
      it('should call deleteCoreV1CollectionNamespacedEndpoints successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionNamespacedEndpoints
        //instance.deleteCoreV1CollectionNamespacedEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionNamespacedEvent', function() {
      it('should call deleteCoreV1CollectionNamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionNamespacedEvent
        //instance.deleteCoreV1CollectionNamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionNamespacedLimitRange', function() {
      it('should call deleteCoreV1CollectionNamespacedLimitRange successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionNamespacedLimitRange
        //instance.deleteCoreV1CollectionNamespacedLimitRange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionNamespacedPersistentVolumeClaim', function() {
      it('should call deleteCoreV1CollectionNamespacedPersistentVolumeClaim successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionNamespacedPersistentVolumeClaim
        //instance.deleteCoreV1CollectionNamespacedPersistentVolumeClaim(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionNamespacedPod', function() {
      it('should call deleteCoreV1CollectionNamespacedPod successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionNamespacedPod
        //instance.deleteCoreV1CollectionNamespacedPod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionNamespacedPodTemplate', function() {
      it('should call deleteCoreV1CollectionNamespacedPodTemplate successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionNamespacedPodTemplate
        //instance.deleteCoreV1CollectionNamespacedPodTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionNamespacedReplicationController', function() {
      it('should call deleteCoreV1CollectionNamespacedReplicationController successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionNamespacedReplicationController
        //instance.deleteCoreV1CollectionNamespacedReplicationController(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionNamespacedResourceQuota', function() {
      it('should call deleteCoreV1CollectionNamespacedResourceQuota successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionNamespacedResourceQuota
        //instance.deleteCoreV1CollectionNamespacedResourceQuota(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionNamespacedSecret', function() {
      it('should call deleteCoreV1CollectionNamespacedSecret successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionNamespacedSecret
        //instance.deleteCoreV1CollectionNamespacedSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionNamespacedService', function() {
      it('should call deleteCoreV1CollectionNamespacedService successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionNamespacedService
        //instance.deleteCoreV1CollectionNamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionNamespacedServiceAccount', function() {
      it('should call deleteCoreV1CollectionNamespacedServiceAccount successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionNamespacedServiceAccount
        //instance.deleteCoreV1CollectionNamespacedServiceAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionNode', function() {
      it('should call deleteCoreV1CollectionNode successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionNode
        //instance.deleteCoreV1CollectionNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionPersistentVolume', function() {
      it('should call deleteCoreV1CollectionPersistentVolume successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionPersistentVolume
        //instance.deleteCoreV1CollectionPersistentVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1Namespace', function() {
      it('should call deleteCoreV1Namespace successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1Namespace
        //instance.deleteCoreV1Namespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1NamespacedConfigMap', function() {
      it('should call deleteCoreV1NamespacedConfigMap successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1NamespacedConfigMap
        //instance.deleteCoreV1NamespacedConfigMap(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1NamespacedEndpoints', function() {
      it('should call deleteCoreV1NamespacedEndpoints successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1NamespacedEndpoints
        //instance.deleteCoreV1NamespacedEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1NamespacedEvent', function() {
      it('should call deleteCoreV1NamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1NamespacedEvent
        //instance.deleteCoreV1NamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1NamespacedLimitRange', function() {
      it('should call deleteCoreV1NamespacedLimitRange successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1NamespacedLimitRange
        //instance.deleteCoreV1NamespacedLimitRange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1NamespacedPersistentVolumeClaim', function() {
      it('should call deleteCoreV1NamespacedPersistentVolumeClaim successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1NamespacedPersistentVolumeClaim
        //instance.deleteCoreV1NamespacedPersistentVolumeClaim(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1NamespacedPod', function() {
      it('should call deleteCoreV1NamespacedPod successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1NamespacedPod
        //instance.deleteCoreV1NamespacedPod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1NamespacedPodTemplate', function() {
      it('should call deleteCoreV1NamespacedPodTemplate successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1NamespacedPodTemplate
        //instance.deleteCoreV1NamespacedPodTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1NamespacedReplicationController', function() {
      it('should call deleteCoreV1NamespacedReplicationController successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1NamespacedReplicationController
        //instance.deleteCoreV1NamespacedReplicationController(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1NamespacedResourceQuota', function() {
      it('should call deleteCoreV1NamespacedResourceQuota successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1NamespacedResourceQuota
        //instance.deleteCoreV1NamespacedResourceQuota(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1NamespacedSecret', function() {
      it('should call deleteCoreV1NamespacedSecret successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1NamespacedSecret
        //instance.deleteCoreV1NamespacedSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1NamespacedService', function() {
      it('should call deleteCoreV1NamespacedService successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1NamespacedService
        //instance.deleteCoreV1NamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1NamespacedServiceAccount', function() {
      it('should call deleteCoreV1NamespacedServiceAccount successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1NamespacedServiceAccount
        //instance.deleteCoreV1NamespacedServiceAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1Node', function() {
      it('should call deleteCoreV1Node successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1Node
        //instance.deleteCoreV1Node(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1PersistentVolume', function() {
      it('should call deleteCoreV1PersistentVolume successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1PersistentVolume
        //instance.deleteCoreV1PersistentVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCoreV1APIResources', function() {
      it('should call getCoreV1APIResources successfully', function(done) {
        //uncomment below and update the code to test getCoreV1APIResources
        //instance.getCoreV1APIResources(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1ComponentStatus', function() {
      it('should call listCoreV1ComponentStatus successfully', function(done) {
        //uncomment below and update the code to test listCoreV1ComponentStatus
        //instance.listCoreV1ComponentStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1ConfigMapForAllNamespaces', function() {
      it('should call listCoreV1ConfigMapForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listCoreV1ConfigMapForAllNamespaces
        //instance.listCoreV1ConfigMapForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1EndpointsForAllNamespaces', function() {
      it('should call listCoreV1EndpointsForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listCoreV1EndpointsForAllNamespaces
        //instance.listCoreV1EndpointsForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1EventForAllNamespaces', function() {
      it('should call listCoreV1EventForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listCoreV1EventForAllNamespaces
        //instance.listCoreV1EventForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1LimitRangeForAllNamespaces', function() {
      it('should call listCoreV1LimitRangeForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listCoreV1LimitRangeForAllNamespaces
        //instance.listCoreV1LimitRangeForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1Namespace', function() {
      it('should call listCoreV1Namespace successfully', function(done) {
        //uncomment below and update the code to test listCoreV1Namespace
        //instance.listCoreV1Namespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1NamespacedConfigMap', function() {
      it('should call listCoreV1NamespacedConfigMap successfully', function(done) {
        //uncomment below and update the code to test listCoreV1NamespacedConfigMap
        //instance.listCoreV1NamespacedConfigMap(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1NamespacedEndpoints', function() {
      it('should call listCoreV1NamespacedEndpoints successfully', function(done) {
        //uncomment below and update the code to test listCoreV1NamespacedEndpoints
        //instance.listCoreV1NamespacedEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1NamespacedEvent', function() {
      it('should call listCoreV1NamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test listCoreV1NamespacedEvent
        //instance.listCoreV1NamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1NamespacedLimitRange', function() {
      it('should call listCoreV1NamespacedLimitRange successfully', function(done) {
        //uncomment below and update the code to test listCoreV1NamespacedLimitRange
        //instance.listCoreV1NamespacedLimitRange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1NamespacedPersistentVolumeClaim', function() {
      it('should call listCoreV1NamespacedPersistentVolumeClaim successfully', function(done) {
        //uncomment below and update the code to test listCoreV1NamespacedPersistentVolumeClaim
        //instance.listCoreV1NamespacedPersistentVolumeClaim(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1NamespacedPod', function() {
      it('should call listCoreV1NamespacedPod successfully', function(done) {
        //uncomment below and update the code to test listCoreV1NamespacedPod
        //instance.listCoreV1NamespacedPod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1NamespacedPodTemplate', function() {
      it('should call listCoreV1NamespacedPodTemplate successfully', function(done) {
        //uncomment below and update the code to test listCoreV1NamespacedPodTemplate
        //instance.listCoreV1NamespacedPodTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1NamespacedReplicationController', function() {
      it('should call listCoreV1NamespacedReplicationController successfully', function(done) {
        //uncomment below and update the code to test listCoreV1NamespacedReplicationController
        //instance.listCoreV1NamespacedReplicationController(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1NamespacedResourceQuota', function() {
      it('should call listCoreV1NamespacedResourceQuota successfully', function(done) {
        //uncomment below and update the code to test listCoreV1NamespacedResourceQuota
        //instance.listCoreV1NamespacedResourceQuota(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1NamespacedSecret', function() {
      it('should call listCoreV1NamespacedSecret successfully', function(done) {
        //uncomment below and update the code to test listCoreV1NamespacedSecret
        //instance.listCoreV1NamespacedSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1NamespacedService', function() {
      it('should call listCoreV1NamespacedService successfully', function(done) {
        //uncomment below and update the code to test listCoreV1NamespacedService
        //instance.listCoreV1NamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1NamespacedServiceAccount', function() {
      it('should call listCoreV1NamespacedServiceAccount successfully', function(done) {
        //uncomment below and update the code to test listCoreV1NamespacedServiceAccount
        //instance.listCoreV1NamespacedServiceAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1Node', function() {
      it('should call listCoreV1Node successfully', function(done) {
        //uncomment below and update the code to test listCoreV1Node
        //instance.listCoreV1Node(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1PersistentVolume', function() {
      it('should call listCoreV1PersistentVolume successfully', function(done) {
        //uncomment below and update the code to test listCoreV1PersistentVolume
        //instance.listCoreV1PersistentVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1PersistentVolumeClaimForAllNamespaces', function() {
      it('should call listCoreV1PersistentVolumeClaimForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listCoreV1PersistentVolumeClaimForAllNamespaces
        //instance.listCoreV1PersistentVolumeClaimForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1PodForAllNamespaces', function() {
      it('should call listCoreV1PodForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listCoreV1PodForAllNamespaces
        //instance.listCoreV1PodForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1PodTemplateForAllNamespaces', function() {
      it('should call listCoreV1PodTemplateForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listCoreV1PodTemplateForAllNamespaces
        //instance.listCoreV1PodTemplateForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1ReplicationControllerForAllNamespaces', function() {
      it('should call listCoreV1ReplicationControllerForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listCoreV1ReplicationControllerForAllNamespaces
        //instance.listCoreV1ReplicationControllerForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1ResourceQuotaForAllNamespaces', function() {
      it('should call listCoreV1ResourceQuotaForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listCoreV1ResourceQuotaForAllNamespaces
        //instance.listCoreV1ResourceQuotaForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1SecretForAllNamespaces', function() {
      it('should call listCoreV1SecretForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listCoreV1SecretForAllNamespaces
        //instance.listCoreV1SecretForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1ServiceAccountForAllNamespaces', function() {
      it('should call listCoreV1ServiceAccountForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listCoreV1ServiceAccountForAllNamespaces
        //instance.listCoreV1ServiceAccountForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1ServiceForAllNamespaces', function() {
      it('should call listCoreV1ServiceForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listCoreV1ServiceForAllNamespaces
        //instance.listCoreV1ServiceForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1Namespace', function() {
      it('should call patchCoreV1Namespace successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1Namespace
        //instance.patchCoreV1Namespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespaceStatus', function() {
      it('should call patchCoreV1NamespaceStatus successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespaceStatus
        //instance.patchCoreV1NamespaceStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedConfigMap', function() {
      it('should call patchCoreV1NamespacedConfigMap successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedConfigMap
        //instance.patchCoreV1NamespacedConfigMap(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedEndpoints', function() {
      it('should call patchCoreV1NamespacedEndpoints successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedEndpoints
        //instance.patchCoreV1NamespacedEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedEvent', function() {
      it('should call patchCoreV1NamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedEvent
        //instance.patchCoreV1NamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedLimitRange', function() {
      it('should call patchCoreV1NamespacedLimitRange successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedLimitRange
        //instance.patchCoreV1NamespacedLimitRange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedPersistentVolumeClaim', function() {
      it('should call patchCoreV1NamespacedPersistentVolumeClaim successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedPersistentVolumeClaim
        //instance.patchCoreV1NamespacedPersistentVolumeClaim(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedPersistentVolumeClaimStatus', function() {
      it('should call patchCoreV1NamespacedPersistentVolumeClaimStatus successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedPersistentVolumeClaimStatus
        //instance.patchCoreV1NamespacedPersistentVolumeClaimStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedPod', function() {
      it('should call patchCoreV1NamespacedPod successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedPod
        //instance.patchCoreV1NamespacedPod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedPodEphemeralcontainers', function() {
      it('should call patchCoreV1NamespacedPodEphemeralcontainers successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedPodEphemeralcontainers
        //instance.patchCoreV1NamespacedPodEphemeralcontainers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedPodStatus', function() {
      it('should call patchCoreV1NamespacedPodStatus successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedPodStatus
        //instance.patchCoreV1NamespacedPodStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedPodTemplate', function() {
      it('should call patchCoreV1NamespacedPodTemplate successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedPodTemplate
        //instance.patchCoreV1NamespacedPodTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedReplicationController', function() {
      it('should call patchCoreV1NamespacedReplicationController successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedReplicationController
        //instance.patchCoreV1NamespacedReplicationController(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedReplicationControllerScale', function() {
      it('should call patchCoreV1NamespacedReplicationControllerScale successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedReplicationControllerScale
        //instance.patchCoreV1NamespacedReplicationControllerScale(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedReplicationControllerStatus', function() {
      it('should call patchCoreV1NamespacedReplicationControllerStatus successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedReplicationControllerStatus
        //instance.patchCoreV1NamespacedReplicationControllerStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedResourceQuota', function() {
      it('should call patchCoreV1NamespacedResourceQuota successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedResourceQuota
        //instance.patchCoreV1NamespacedResourceQuota(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedResourceQuotaStatus', function() {
      it('should call patchCoreV1NamespacedResourceQuotaStatus successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedResourceQuotaStatus
        //instance.patchCoreV1NamespacedResourceQuotaStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedSecret', function() {
      it('should call patchCoreV1NamespacedSecret successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedSecret
        //instance.patchCoreV1NamespacedSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedService', function() {
      it('should call patchCoreV1NamespacedService successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedService
        //instance.patchCoreV1NamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedServiceAccount', function() {
      it('should call patchCoreV1NamespacedServiceAccount successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedServiceAccount
        //instance.patchCoreV1NamespacedServiceAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedServiceStatus', function() {
      it('should call patchCoreV1NamespacedServiceStatus successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedServiceStatus
        //instance.patchCoreV1NamespacedServiceStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1Node', function() {
      it('should call patchCoreV1Node successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1Node
        //instance.patchCoreV1Node(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NodeStatus', function() {
      it('should call patchCoreV1NodeStatus successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NodeStatus
        //instance.patchCoreV1NodeStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1PersistentVolume', function() {
      it('should call patchCoreV1PersistentVolume successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1PersistentVolume
        //instance.patchCoreV1PersistentVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1PersistentVolumeStatus', function() {
      it('should call patchCoreV1PersistentVolumeStatus successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1PersistentVolumeStatus
        //instance.patchCoreV1PersistentVolumeStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1ComponentStatus', function() {
      it('should call readCoreV1ComponentStatus successfully', function(done) {
        //uncomment below and update the code to test readCoreV1ComponentStatus
        //instance.readCoreV1ComponentStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1Namespace', function() {
      it('should call readCoreV1Namespace successfully', function(done) {
        //uncomment below and update the code to test readCoreV1Namespace
        //instance.readCoreV1Namespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespaceStatus', function() {
      it('should call readCoreV1NamespaceStatus successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespaceStatus
        //instance.readCoreV1NamespaceStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedConfigMap', function() {
      it('should call readCoreV1NamespacedConfigMap successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedConfigMap
        //instance.readCoreV1NamespacedConfigMap(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedEndpoints', function() {
      it('should call readCoreV1NamespacedEndpoints successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedEndpoints
        //instance.readCoreV1NamespacedEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedEvent', function() {
      it('should call readCoreV1NamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedEvent
        //instance.readCoreV1NamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedLimitRange', function() {
      it('should call readCoreV1NamespacedLimitRange successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedLimitRange
        //instance.readCoreV1NamespacedLimitRange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedPersistentVolumeClaim', function() {
      it('should call readCoreV1NamespacedPersistentVolumeClaim successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedPersistentVolumeClaim
        //instance.readCoreV1NamespacedPersistentVolumeClaim(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedPersistentVolumeClaimStatus', function() {
      it('should call readCoreV1NamespacedPersistentVolumeClaimStatus successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedPersistentVolumeClaimStatus
        //instance.readCoreV1NamespacedPersistentVolumeClaimStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedPod', function() {
      it('should call readCoreV1NamespacedPod successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedPod
        //instance.readCoreV1NamespacedPod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedPodEphemeralcontainers', function() {
      it('should call readCoreV1NamespacedPodEphemeralcontainers successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedPodEphemeralcontainers
        //instance.readCoreV1NamespacedPodEphemeralcontainers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedPodLog', function() {
      it('should call readCoreV1NamespacedPodLog successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedPodLog
        //instance.readCoreV1NamespacedPodLog(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedPodStatus', function() {
      it('should call readCoreV1NamespacedPodStatus successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedPodStatus
        //instance.readCoreV1NamespacedPodStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedPodTemplate', function() {
      it('should call readCoreV1NamespacedPodTemplate successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedPodTemplate
        //instance.readCoreV1NamespacedPodTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedReplicationController', function() {
      it('should call readCoreV1NamespacedReplicationController successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedReplicationController
        //instance.readCoreV1NamespacedReplicationController(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedReplicationControllerScale', function() {
      it('should call readCoreV1NamespacedReplicationControllerScale successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedReplicationControllerScale
        //instance.readCoreV1NamespacedReplicationControllerScale(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedReplicationControllerStatus', function() {
      it('should call readCoreV1NamespacedReplicationControllerStatus successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedReplicationControllerStatus
        //instance.readCoreV1NamespacedReplicationControllerStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedResourceQuota', function() {
      it('should call readCoreV1NamespacedResourceQuota successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedResourceQuota
        //instance.readCoreV1NamespacedResourceQuota(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedResourceQuotaStatus', function() {
      it('should call readCoreV1NamespacedResourceQuotaStatus successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedResourceQuotaStatus
        //instance.readCoreV1NamespacedResourceQuotaStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedSecret', function() {
      it('should call readCoreV1NamespacedSecret successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedSecret
        //instance.readCoreV1NamespacedSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedService', function() {
      it('should call readCoreV1NamespacedService successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedService
        //instance.readCoreV1NamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedServiceAccount', function() {
      it('should call readCoreV1NamespacedServiceAccount successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedServiceAccount
        //instance.readCoreV1NamespacedServiceAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedServiceStatus', function() {
      it('should call readCoreV1NamespacedServiceStatus successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedServiceStatus
        //instance.readCoreV1NamespacedServiceStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1Node', function() {
      it('should call readCoreV1Node successfully', function(done) {
        //uncomment below and update the code to test readCoreV1Node
        //instance.readCoreV1Node(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NodeStatus', function() {
      it('should call readCoreV1NodeStatus successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NodeStatus
        //instance.readCoreV1NodeStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1PersistentVolume', function() {
      it('should call readCoreV1PersistentVolume successfully', function(done) {
        //uncomment below and update the code to test readCoreV1PersistentVolume
        //instance.readCoreV1PersistentVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1PersistentVolumeStatus', function() {
      it('should call readCoreV1PersistentVolumeStatus successfully', function(done) {
        //uncomment below and update the code to test readCoreV1PersistentVolumeStatus
        //instance.readCoreV1PersistentVolumeStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1Namespace', function() {
      it('should call replaceCoreV1Namespace successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1Namespace
        //instance.replaceCoreV1Namespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespaceFinalize', function() {
      it('should call replaceCoreV1NamespaceFinalize successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespaceFinalize
        //instance.replaceCoreV1NamespaceFinalize(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespaceStatus', function() {
      it('should call replaceCoreV1NamespaceStatus successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespaceStatus
        //instance.replaceCoreV1NamespaceStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedConfigMap', function() {
      it('should call replaceCoreV1NamespacedConfigMap successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedConfigMap
        //instance.replaceCoreV1NamespacedConfigMap(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedEndpoints', function() {
      it('should call replaceCoreV1NamespacedEndpoints successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedEndpoints
        //instance.replaceCoreV1NamespacedEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedEvent', function() {
      it('should call replaceCoreV1NamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedEvent
        //instance.replaceCoreV1NamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedLimitRange', function() {
      it('should call replaceCoreV1NamespacedLimitRange successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedLimitRange
        //instance.replaceCoreV1NamespacedLimitRange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedPersistentVolumeClaim', function() {
      it('should call replaceCoreV1NamespacedPersistentVolumeClaim successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedPersistentVolumeClaim
        //instance.replaceCoreV1NamespacedPersistentVolumeClaim(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedPersistentVolumeClaimStatus', function() {
      it('should call replaceCoreV1NamespacedPersistentVolumeClaimStatus successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedPersistentVolumeClaimStatus
        //instance.replaceCoreV1NamespacedPersistentVolumeClaimStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedPod', function() {
      it('should call replaceCoreV1NamespacedPod successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedPod
        //instance.replaceCoreV1NamespacedPod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedPodEphemeralcontainers', function() {
      it('should call replaceCoreV1NamespacedPodEphemeralcontainers successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedPodEphemeralcontainers
        //instance.replaceCoreV1NamespacedPodEphemeralcontainers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedPodStatus', function() {
      it('should call replaceCoreV1NamespacedPodStatus successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedPodStatus
        //instance.replaceCoreV1NamespacedPodStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedPodTemplate', function() {
      it('should call replaceCoreV1NamespacedPodTemplate successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedPodTemplate
        //instance.replaceCoreV1NamespacedPodTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedReplicationController', function() {
      it('should call replaceCoreV1NamespacedReplicationController successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedReplicationController
        //instance.replaceCoreV1NamespacedReplicationController(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedReplicationControllerScale', function() {
      it('should call replaceCoreV1NamespacedReplicationControllerScale successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedReplicationControllerScale
        //instance.replaceCoreV1NamespacedReplicationControllerScale(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedReplicationControllerStatus', function() {
      it('should call replaceCoreV1NamespacedReplicationControllerStatus successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedReplicationControllerStatus
        //instance.replaceCoreV1NamespacedReplicationControllerStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedResourceQuota', function() {
      it('should call replaceCoreV1NamespacedResourceQuota successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedResourceQuota
        //instance.replaceCoreV1NamespacedResourceQuota(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedResourceQuotaStatus', function() {
      it('should call replaceCoreV1NamespacedResourceQuotaStatus successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedResourceQuotaStatus
        //instance.replaceCoreV1NamespacedResourceQuotaStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedSecret', function() {
      it('should call replaceCoreV1NamespacedSecret successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedSecret
        //instance.replaceCoreV1NamespacedSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedService', function() {
      it('should call replaceCoreV1NamespacedService successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedService
        //instance.replaceCoreV1NamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedServiceAccount', function() {
      it('should call replaceCoreV1NamespacedServiceAccount successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedServiceAccount
        //instance.replaceCoreV1NamespacedServiceAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedServiceStatus', function() {
      it('should call replaceCoreV1NamespacedServiceStatus successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedServiceStatus
        //instance.replaceCoreV1NamespacedServiceStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1Node', function() {
      it('should call replaceCoreV1Node successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1Node
        //instance.replaceCoreV1Node(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NodeStatus', function() {
      it('should call replaceCoreV1NodeStatus successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NodeStatus
        //instance.replaceCoreV1NodeStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1PersistentVolume', function() {
      it('should call replaceCoreV1PersistentVolume successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1PersistentVolume
        //instance.replaceCoreV1PersistentVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1PersistentVolumeStatus', function() {
      it('should call replaceCoreV1PersistentVolumeStatus successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1PersistentVolumeStatus
        //instance.replaceCoreV1PersistentVolumeStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1ConfigMapListForAllNamespaces', function() {
      it('should call watchCoreV1ConfigMapListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1ConfigMapListForAllNamespaces
        //instance.watchCoreV1ConfigMapListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1EndpointsListForAllNamespaces', function() {
      it('should call watchCoreV1EndpointsListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1EndpointsListForAllNamespaces
        //instance.watchCoreV1EndpointsListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1EventListForAllNamespaces', function() {
      it('should call watchCoreV1EventListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1EventListForAllNamespaces
        //instance.watchCoreV1EventListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1LimitRangeListForAllNamespaces', function() {
      it('should call watchCoreV1LimitRangeListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1LimitRangeListForAllNamespaces
        //instance.watchCoreV1LimitRangeListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1Namespace', function() {
      it('should call watchCoreV1Namespace successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1Namespace
        //instance.watchCoreV1Namespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespaceList', function() {
      it('should call watchCoreV1NamespaceList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespaceList
        //instance.watchCoreV1NamespaceList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedConfigMap', function() {
      it('should call watchCoreV1NamespacedConfigMap successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedConfigMap
        //instance.watchCoreV1NamespacedConfigMap(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedConfigMapList', function() {
      it('should call watchCoreV1NamespacedConfigMapList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedConfigMapList
        //instance.watchCoreV1NamespacedConfigMapList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedEndpoints', function() {
      it('should call watchCoreV1NamespacedEndpoints successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedEndpoints
        //instance.watchCoreV1NamespacedEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedEndpointsList', function() {
      it('should call watchCoreV1NamespacedEndpointsList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedEndpointsList
        //instance.watchCoreV1NamespacedEndpointsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedEvent', function() {
      it('should call watchCoreV1NamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedEvent
        //instance.watchCoreV1NamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedEventList', function() {
      it('should call watchCoreV1NamespacedEventList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedEventList
        //instance.watchCoreV1NamespacedEventList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedLimitRange', function() {
      it('should call watchCoreV1NamespacedLimitRange successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedLimitRange
        //instance.watchCoreV1NamespacedLimitRange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedLimitRangeList', function() {
      it('should call watchCoreV1NamespacedLimitRangeList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedLimitRangeList
        //instance.watchCoreV1NamespacedLimitRangeList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedPersistentVolumeClaim', function() {
      it('should call watchCoreV1NamespacedPersistentVolumeClaim successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedPersistentVolumeClaim
        //instance.watchCoreV1NamespacedPersistentVolumeClaim(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedPersistentVolumeClaimList', function() {
      it('should call watchCoreV1NamespacedPersistentVolumeClaimList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedPersistentVolumeClaimList
        //instance.watchCoreV1NamespacedPersistentVolumeClaimList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedPod', function() {
      it('should call watchCoreV1NamespacedPod successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedPod
        //instance.watchCoreV1NamespacedPod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedPodList', function() {
      it('should call watchCoreV1NamespacedPodList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedPodList
        //instance.watchCoreV1NamespacedPodList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedPodTemplate', function() {
      it('should call watchCoreV1NamespacedPodTemplate successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedPodTemplate
        //instance.watchCoreV1NamespacedPodTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedPodTemplateList', function() {
      it('should call watchCoreV1NamespacedPodTemplateList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedPodTemplateList
        //instance.watchCoreV1NamespacedPodTemplateList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedReplicationController', function() {
      it('should call watchCoreV1NamespacedReplicationController successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedReplicationController
        //instance.watchCoreV1NamespacedReplicationController(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedReplicationControllerList', function() {
      it('should call watchCoreV1NamespacedReplicationControllerList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedReplicationControllerList
        //instance.watchCoreV1NamespacedReplicationControllerList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedResourceQuota', function() {
      it('should call watchCoreV1NamespacedResourceQuota successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedResourceQuota
        //instance.watchCoreV1NamespacedResourceQuota(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedResourceQuotaList', function() {
      it('should call watchCoreV1NamespacedResourceQuotaList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedResourceQuotaList
        //instance.watchCoreV1NamespacedResourceQuotaList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedSecret', function() {
      it('should call watchCoreV1NamespacedSecret successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedSecret
        //instance.watchCoreV1NamespacedSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedSecretList', function() {
      it('should call watchCoreV1NamespacedSecretList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedSecretList
        //instance.watchCoreV1NamespacedSecretList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedService', function() {
      it('should call watchCoreV1NamespacedService successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedService
        //instance.watchCoreV1NamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedServiceAccount', function() {
      it('should call watchCoreV1NamespacedServiceAccount successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedServiceAccount
        //instance.watchCoreV1NamespacedServiceAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedServiceAccountList', function() {
      it('should call watchCoreV1NamespacedServiceAccountList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedServiceAccountList
        //instance.watchCoreV1NamespacedServiceAccountList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedServiceList', function() {
      it('should call watchCoreV1NamespacedServiceList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedServiceList
        //instance.watchCoreV1NamespacedServiceList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1Node', function() {
      it('should call watchCoreV1Node successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1Node
        //instance.watchCoreV1Node(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NodeList', function() {
      it('should call watchCoreV1NodeList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NodeList
        //instance.watchCoreV1NodeList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1PersistentVolume', function() {
      it('should call watchCoreV1PersistentVolume successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1PersistentVolume
        //instance.watchCoreV1PersistentVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1PersistentVolumeClaimListForAllNamespaces', function() {
      it('should call watchCoreV1PersistentVolumeClaimListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1PersistentVolumeClaimListForAllNamespaces
        //instance.watchCoreV1PersistentVolumeClaimListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1PersistentVolumeList', function() {
      it('should call watchCoreV1PersistentVolumeList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1PersistentVolumeList
        //instance.watchCoreV1PersistentVolumeList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1PodListForAllNamespaces', function() {
      it('should call watchCoreV1PodListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1PodListForAllNamespaces
        //instance.watchCoreV1PodListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1PodTemplateListForAllNamespaces', function() {
      it('should call watchCoreV1PodTemplateListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1PodTemplateListForAllNamespaces
        //instance.watchCoreV1PodTemplateListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1ReplicationControllerListForAllNamespaces', function() {
      it('should call watchCoreV1ReplicationControllerListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1ReplicationControllerListForAllNamespaces
        //instance.watchCoreV1ReplicationControllerListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1ResourceQuotaListForAllNamespaces', function() {
      it('should call watchCoreV1ResourceQuotaListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1ResourceQuotaListForAllNamespaces
        //instance.watchCoreV1ResourceQuotaListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1SecretListForAllNamespaces', function() {
      it('should call watchCoreV1SecretListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1SecretListForAllNamespaces
        //instance.watchCoreV1SecretListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1ServiceAccountListForAllNamespaces', function() {
      it('should call watchCoreV1ServiceAccountListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1ServiceAccountListForAllNamespaces
        //instance.watchCoreV1ServiceAccountListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1ServiceListForAllNamespaces', function() {
      it('should call watchCoreV1ServiceListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1ServiceListForAllNamespaces
        //instance.watchCoreV1ServiceListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
