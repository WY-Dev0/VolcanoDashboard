/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Kubernetes);
  }
}(this, function(expect, Kubernetes) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Kubernetes.EventsV1Api();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('EventsV1Api', function() {
    describe('createEventsV1NamespacedEvent', function() {
      it('should call createEventsV1NamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test createEventsV1NamespacedEvent
        //instance.createEventsV1NamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEventsV1CollectionNamespacedEvent', function() {
      it('should call deleteEventsV1CollectionNamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test deleteEventsV1CollectionNamespacedEvent
        //instance.deleteEventsV1CollectionNamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEventsV1NamespacedEvent', function() {
      it('should call deleteEventsV1NamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test deleteEventsV1NamespacedEvent
        //instance.deleteEventsV1NamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEventsV1APIResources', function() {
      it('should call getEventsV1APIResources successfully', function(done) {
        //uncomment below and update the code to test getEventsV1APIResources
        //instance.getEventsV1APIResources(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEventsV1EventForAllNamespaces', function() {
      it('should call listEventsV1EventForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listEventsV1EventForAllNamespaces
        //instance.listEventsV1EventForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEventsV1NamespacedEvent', function() {
      it('should call listEventsV1NamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test listEventsV1NamespacedEvent
        //instance.listEventsV1NamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchEventsV1NamespacedEvent', function() {
      it('should call patchEventsV1NamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test patchEventsV1NamespacedEvent
        //instance.patchEventsV1NamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readEventsV1NamespacedEvent', function() {
      it('should call readEventsV1NamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test readEventsV1NamespacedEvent
        //instance.readEventsV1NamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceEventsV1NamespacedEvent', function() {
      it('should call replaceEventsV1NamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test replaceEventsV1NamespacedEvent
        //instance.replaceEventsV1NamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchEventsV1EventListForAllNamespaces', function() {
      it('should call watchEventsV1EventListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchEventsV1EventListForAllNamespaces
        //instance.watchEventsV1EventListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchEventsV1NamespacedEvent', function() {
      it('should call watchEventsV1NamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test watchEventsV1NamespacedEvent
        //instance.watchEventsV1NamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchEventsV1NamespacedEventList', function() {
      it('should call watchEventsV1NamespacedEventList successfully', function(done) {
        //uncomment below and update the code to test watchEventsV1NamespacedEventList
        //instance.watchEventsV1NamespacedEventList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
