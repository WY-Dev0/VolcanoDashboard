/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IoK8sApiCoreV1ConfigMapNodeConfigSource model module.
 * @module model/IoK8sApiCoreV1ConfigMapNodeConfigSource
 * @version v1.30.0
 */
class IoK8sApiCoreV1ConfigMapNodeConfigSource {
    /**
     * Constructs a new <code>IoK8sApiCoreV1ConfigMapNodeConfigSource</code>.
     * ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration
     * @alias module:model/IoK8sApiCoreV1ConfigMapNodeConfigSource
     * @param kubeletConfigKey {String} KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
     * @param name {String} Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
     * @param namespace {String} Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
     */
    constructor(kubeletConfigKey, name, namespace) { 
        
        IoK8sApiCoreV1ConfigMapNodeConfigSource.initialize(this, kubeletConfigKey, name, namespace);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, kubeletConfigKey, name, namespace) { 
        obj['kubeletConfigKey'] = kubeletConfigKey;
        obj['name'] = name;
        obj['namespace'] = namespace;
    }

    /**
     * Constructs a <code>IoK8sApiCoreV1ConfigMapNodeConfigSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IoK8sApiCoreV1ConfigMapNodeConfigSource} obj Optional instance to populate.
     * @return {module:model/IoK8sApiCoreV1ConfigMapNodeConfigSource} The populated <code>IoK8sApiCoreV1ConfigMapNodeConfigSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IoK8sApiCoreV1ConfigMapNodeConfigSource();

            if (data.hasOwnProperty('kubeletConfigKey')) {
                obj['kubeletConfigKey'] = ApiClient.convertToType(data['kubeletConfigKey'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
            if (data.hasOwnProperty('resourceVersion')) {
                obj['resourceVersion'] = ApiClient.convertToType(data['resourceVersion'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IoK8sApiCoreV1ConfigMapNodeConfigSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IoK8sApiCoreV1ConfigMapNodeConfigSource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IoK8sApiCoreV1ConfigMapNodeConfigSource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['kubeletConfigKey'] && !(typeof data['kubeletConfigKey'] === 'string' || data['kubeletConfigKey'] instanceof String)) {
            throw new Error("Expected the field `kubeletConfigKey` to be a primitive type in the JSON string but got " + data['kubeletConfigKey']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['namespace'] && !(typeof data['namespace'] === 'string' || data['namespace'] instanceof String)) {
            throw new Error("Expected the field `namespace` to be a primitive type in the JSON string but got " + data['namespace']);
        }
        // ensure the json data is a string
        if (data['resourceVersion'] && !(typeof data['resourceVersion'] === 'string' || data['resourceVersion'] instanceof String)) {
            throw new Error("Expected the field `resourceVersion` to be a primitive type in the JSON string but got " + data['resourceVersion']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }

        return true;
    }


}

IoK8sApiCoreV1ConfigMapNodeConfigSource.RequiredProperties = ["kubeletConfigKey", "name", "namespace"];

/**
 * KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
 * @member {String} kubeletConfigKey
 */
IoK8sApiCoreV1ConfigMapNodeConfigSource.prototype['kubeletConfigKey'] = undefined;

/**
 * Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
 * @member {String} name
 */
IoK8sApiCoreV1ConfigMapNodeConfigSource.prototype['name'] = undefined;

/**
 * Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
 * @member {String} namespace
 */
IoK8sApiCoreV1ConfigMapNodeConfigSource.prototype['namespace'] = undefined;

/**
 * ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
 * @member {String} resourceVersion
 */
IoK8sApiCoreV1ConfigMapNodeConfigSource.prototype['resourceVersion'] = undefined;

/**
 * UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
 * @member {String} uid
 */
IoK8sApiCoreV1ConfigMapNodeConfigSource.prototype['uid'] = undefined;






export default IoK8sApiCoreV1ConfigMapNodeConfigSource;

