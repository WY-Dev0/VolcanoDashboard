/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IoK8sApiCoordinationV1LeaseSpec model module.
 * @module model/IoK8sApiCoordinationV1LeaseSpec
 * @version v1.30.0
 */
class IoK8sApiCoordinationV1LeaseSpec {
    /**
     * Constructs a new <code>IoK8sApiCoordinationV1LeaseSpec</code>.
     * LeaseSpec is a specification of a Lease.
     * @alias module:model/IoK8sApiCoordinationV1LeaseSpec
     */
    constructor() { 
        
        IoK8sApiCoordinationV1LeaseSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IoK8sApiCoordinationV1LeaseSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IoK8sApiCoordinationV1LeaseSpec} obj Optional instance to populate.
     * @return {module:model/IoK8sApiCoordinationV1LeaseSpec} The populated <code>IoK8sApiCoordinationV1LeaseSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IoK8sApiCoordinationV1LeaseSpec();

            if (data.hasOwnProperty('acquireTime')) {
                obj['acquireTime'] = ApiClient.convertToType(data['acquireTime'], 'Date');
            }
            if (data.hasOwnProperty('holderIdentity')) {
                obj['holderIdentity'] = ApiClient.convertToType(data['holderIdentity'], 'String');
            }
            if (data.hasOwnProperty('leaseDurationSeconds')) {
                obj['leaseDurationSeconds'] = ApiClient.convertToType(data['leaseDurationSeconds'], 'Number');
            }
            if (data.hasOwnProperty('leaseTransitions')) {
                obj['leaseTransitions'] = ApiClient.convertToType(data['leaseTransitions'], 'Number');
            }
            if (data.hasOwnProperty('renewTime')) {
                obj['renewTime'] = ApiClient.convertToType(data['renewTime'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IoK8sApiCoordinationV1LeaseSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IoK8sApiCoordinationV1LeaseSpec</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['holderIdentity'] && !(typeof data['holderIdentity'] === 'string' || data['holderIdentity'] instanceof String)) {
            throw new Error("Expected the field `holderIdentity` to be a primitive type in the JSON string but got " + data['holderIdentity']);
        }

        return true;
    }


}



/**
 * MicroTime is version of Time with microsecond level precision.
 * @member {Date} acquireTime
 */
IoK8sApiCoordinationV1LeaseSpec.prototype['acquireTime'] = undefined;

/**
 * holderIdentity contains the identity of the holder of a current lease.
 * @member {String} holderIdentity
 */
IoK8sApiCoordinationV1LeaseSpec.prototype['holderIdentity'] = undefined;

/**
 * leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed renewTime.
 * @member {Number} leaseDurationSeconds
 */
IoK8sApiCoordinationV1LeaseSpec.prototype['leaseDurationSeconds'] = undefined;

/**
 * leaseTransitions is the number of transitions of a lease between holders.
 * @member {Number} leaseTransitions
 */
IoK8sApiCoordinationV1LeaseSpec.prototype['leaseTransitions'] = undefined;

/**
 * MicroTime is version of Time with microsecond level precision.
 * @member {Date} renewTime
 */
IoK8sApiCoordinationV1LeaseSpec.prototype['renewTime'] = undefined;






export default IoK8sApiCoordinationV1LeaseSpec;

