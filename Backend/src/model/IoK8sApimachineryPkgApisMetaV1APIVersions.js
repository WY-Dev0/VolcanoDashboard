/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR from './IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR';

/**
 * The IoK8sApimachineryPkgApisMetaV1APIVersions model module.
 * @module model/IoK8sApimachineryPkgApisMetaV1APIVersions
 * @version v1.30.0
 */
class IoK8sApimachineryPkgApisMetaV1APIVersions {
    /**
     * Constructs a new <code>IoK8sApimachineryPkgApisMetaV1APIVersions</code>.
     * APIVersions lists the versions that are available, to allow clients to discover the API at /api, which is the root path of the legacy v1 API.
     * @alias module:model/IoK8sApimachineryPkgApisMetaV1APIVersions
     * @param serverAddressByClientCIDRs {Array.<module:model/IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR>} a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.
     * @param versions {Array.<String>} versions are the api versions that are available.
     */
    constructor(serverAddressByClientCIDRs, versions) { 
        
        IoK8sApimachineryPkgApisMetaV1APIVersions.initialize(this, serverAddressByClientCIDRs, versions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, serverAddressByClientCIDRs, versions) { 
        obj['serverAddressByClientCIDRs'] = serverAddressByClientCIDRs;
        obj['versions'] = versions;
    }

    /**
     * Constructs a <code>IoK8sApimachineryPkgApisMetaV1APIVersions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IoK8sApimachineryPkgApisMetaV1APIVersions} obj Optional instance to populate.
     * @return {module:model/IoK8sApimachineryPkgApisMetaV1APIVersions} The populated <code>IoK8sApimachineryPkgApisMetaV1APIVersions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IoK8sApimachineryPkgApisMetaV1APIVersions();

            if (data.hasOwnProperty('apiVersion')) {
                obj['apiVersion'] = ApiClient.convertToType(data['apiVersion'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('serverAddressByClientCIDRs')) {
                obj['serverAddressByClientCIDRs'] = ApiClient.convertToType(data['serverAddressByClientCIDRs'], [IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR]);
            }
            if (data.hasOwnProperty('versions')) {
                obj['versions'] = ApiClient.convertToType(data['versions'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IoK8sApimachineryPkgApisMetaV1APIVersions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IoK8sApimachineryPkgApisMetaV1APIVersions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IoK8sApimachineryPkgApisMetaV1APIVersions.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['apiVersion'] && !(typeof data['apiVersion'] === 'string' || data['apiVersion'] instanceof String)) {
            throw new Error("Expected the field `apiVersion` to be a primitive type in the JSON string but got " + data['apiVersion']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        if (data['serverAddressByClientCIDRs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['serverAddressByClientCIDRs'])) {
                throw new Error("Expected the field `serverAddressByClientCIDRs` to be an array in the JSON data but got " + data['serverAddressByClientCIDRs']);
            }
            // validate the optional field `serverAddressByClientCIDRs` (array)
            for (const item of data['serverAddressByClientCIDRs']) {
                IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['versions'])) {
            throw new Error("Expected the field `versions` to be an array in the JSON data but got " + data['versions']);
        }

        return true;
    }


}

IoK8sApimachineryPkgApisMetaV1APIVersions.RequiredProperties = ["serverAddressByClientCIDRs", "versions"];

/**
 * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
 * @member {String} apiVersion
 */
IoK8sApimachineryPkgApisMetaV1APIVersions.prototype['apiVersion'] = undefined;

/**
 * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
 * @member {String} kind
 */
IoK8sApimachineryPkgApisMetaV1APIVersions.prototype['kind'] = undefined;

/**
 * a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.
 * @member {Array.<module:model/IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR>} serverAddressByClientCIDRs
 */
IoK8sApimachineryPkgApisMetaV1APIVersions.prototype['serverAddressByClientCIDRs'] = undefined;

/**
 * versions are the api versions that are available.
 * @member {Array.<String>} versions
 */
IoK8sApimachineryPkgApisMetaV1APIVersions.prototype['versions'] = undefined;






export default IoK8sApimachineryPkgApisMetaV1APIVersions;

