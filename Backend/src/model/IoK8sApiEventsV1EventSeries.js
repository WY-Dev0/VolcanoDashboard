/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IoK8sApiEventsV1EventSeries model module.
 * @module model/IoK8sApiEventsV1EventSeries
 * @version v1.30.0
 */
class IoK8sApiEventsV1EventSeries {
    /**
     * Constructs a new <code>IoK8sApiEventsV1EventSeries</code>.
     * EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time. How often to update the EventSeries is up to the event reporters. The default event reporter in \&quot;k8s.io/client-go/tools/events/event_broadcaster.go\&quot; shows how this struct is updated on heartbeats and can guide customized reporter implementations.
     * @alias module:model/IoK8sApiEventsV1EventSeries
     * @param count {Number} count is the number of occurrences in this series up to the last heartbeat time.
     * @param lastObservedTime {Date} MicroTime is version of Time with microsecond level precision.
     */
    constructor(count, lastObservedTime) { 
        
        IoK8sApiEventsV1EventSeries.initialize(this, count, lastObservedTime);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, count, lastObservedTime) { 
        obj['count'] = count;
        obj['lastObservedTime'] = lastObservedTime;
    }

    /**
     * Constructs a <code>IoK8sApiEventsV1EventSeries</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IoK8sApiEventsV1EventSeries} obj Optional instance to populate.
     * @return {module:model/IoK8sApiEventsV1EventSeries} The populated <code>IoK8sApiEventsV1EventSeries</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IoK8sApiEventsV1EventSeries();

            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('lastObservedTime')) {
                obj['lastObservedTime'] = ApiClient.convertToType(data['lastObservedTime'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IoK8sApiEventsV1EventSeries</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IoK8sApiEventsV1EventSeries</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IoK8sApiEventsV1EventSeries.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

IoK8sApiEventsV1EventSeries.RequiredProperties = ["count", "lastObservedTime"];

/**
 * count is the number of occurrences in this series up to the last heartbeat time.
 * @member {Number} count
 */
IoK8sApiEventsV1EventSeries.prototype['count'] = undefined;

/**
 * MicroTime is version of Time with microsecond level precision.
 * @member {Date} lastObservedTime
 */
IoK8sApiEventsV1EventSeries.prototype['lastObservedTime'] = undefined;






export default IoK8sApiEventsV1EventSeries;

