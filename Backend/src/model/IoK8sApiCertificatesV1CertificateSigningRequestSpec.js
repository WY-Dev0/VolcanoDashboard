/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IoK8sApiCertificatesV1CertificateSigningRequestSpec model module.
 * @module model/IoK8sApiCertificatesV1CertificateSigningRequestSpec
 * @version v1.30.0
 */
class IoK8sApiCertificatesV1CertificateSigningRequestSpec {
    /**
     * Constructs a new <code>IoK8sApiCertificatesV1CertificateSigningRequestSpec</code>.
     * CertificateSigningRequestSpec contains the certificate request.
     * @alias module:model/IoK8sApiCertificatesV1CertificateSigningRequestSpec
     * @param request {Blob} request contains an x509 certificate signing request encoded in a \"CERTIFICATE REQUEST\" PEM block. When serialized as JSON or YAML, the data is additionally base64-encoded.
     * @param signerName {String} signerName indicates the requested signer, and is a qualified name.  List/watch requests for CertificateSigningRequests can filter on this field using a \"spec.signerName=NAME\" fieldSelector.  Well-known Kubernetes signers are:  1. \"kubernetes.io/kube-apiserver-client\": issues client certificates that can be used to authenticate to kube-apiserver.   Requests for this signer are never auto-approved by kube-controller-manager, can be issued by the \"csrsigning\" controller in kube-controller-manager.  2. \"kubernetes.io/kube-apiserver-client-kubelet\": issues client certificates that kubelets use to authenticate to kube-apiserver.   Requests for this signer can be auto-approved by the \"csrapproving\" controller in kube-controller-manager, and can be issued by the \"csrsigning\" controller in kube-controller-manager.  3. \"kubernetes.io/kubelet-serving\" issues serving certificates that kubelets use to serve TLS endpoints, which kube-apiserver can connect to securely.   Requests for this signer are never auto-approved by kube-controller-manager, and can be issued by the \"csrsigning\" controller in kube-controller-manager.  More details are available at https://k8s.io/docs/reference/access-authn-authz/certificate-signing-requests/#kubernetes-signers  Custom signerNames can also be specified. The signer defines:  1. Trust distribution: how trust (CA bundles) are distributed.  2. Permitted subjects: and behavior when a disallowed subject is requested.  3. Required, permitted, or forbidden x509 extensions in the request (including whether subjectAltNames are allowed, which types, restrictions on allowed values) and behavior when a disallowed extension is requested.  4. Required, permitted, or forbidden key usages / extended key usages.  5. Expiration/certificate lifetime: whether it is fixed by the signer, configurable by the admin.  6. Whether or not requests for CA certificates are allowed.
     */
    constructor(request, signerName) { 
        
        IoK8sApiCertificatesV1CertificateSigningRequestSpec.initialize(this, request, signerName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, request, signerName) { 
        obj['request'] = request;
        obj['signerName'] = signerName;
    }

    /**
     * Constructs a <code>IoK8sApiCertificatesV1CertificateSigningRequestSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IoK8sApiCertificatesV1CertificateSigningRequestSpec} obj Optional instance to populate.
     * @return {module:model/IoK8sApiCertificatesV1CertificateSigningRequestSpec} The populated <code>IoK8sApiCertificatesV1CertificateSigningRequestSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IoK8sApiCertificatesV1CertificateSigningRequestSpec();

            if (data.hasOwnProperty('expirationSeconds')) {
                obj['expirationSeconds'] = ApiClient.convertToType(data['expirationSeconds'], 'Number');
            }
            if (data.hasOwnProperty('extra')) {
                obj['extra'] = ApiClient.convertToType(data['extra'], {'String': ['String']});
            }
            if (data.hasOwnProperty('groups')) {
                obj['groups'] = ApiClient.convertToType(data['groups'], ['String']);
            }
            if (data.hasOwnProperty('request')) {
                obj['request'] = ApiClient.convertToType(data['request'], 'Blob');
            }
            if (data.hasOwnProperty('signerName')) {
                obj['signerName'] = ApiClient.convertToType(data['signerName'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('usages')) {
                obj['usages'] = ApiClient.convertToType(data['usages'], ['String']);
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IoK8sApiCertificatesV1CertificateSigningRequestSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IoK8sApiCertificatesV1CertificateSigningRequestSpec</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IoK8sApiCertificatesV1CertificateSigningRequestSpec.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['groups'])) {
            throw new Error("Expected the field `groups` to be an array in the JSON data but got " + data['groups']);
        }
        // ensure the json data is a string
        if (data['signerName'] && !(typeof data['signerName'] === 'string' || data['signerName'] instanceof String)) {
            throw new Error("Expected the field `signerName` to be a primitive type in the JSON string but got " + data['signerName']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['usages'])) {
            throw new Error("Expected the field `usages` to be an array in the JSON data but got " + data['usages']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}

IoK8sApiCertificatesV1CertificateSigningRequestSpec.RequiredProperties = ["request", "signerName"];

/**
 * expirationSeconds is the requested duration of validity of the issued certificate. The certificate signer may issue a certificate with a different validity duration so a client must check the delta between the notBefore and and notAfter fields in the issued certificate to determine the actual duration.  The v1.22+ in-tree implementations of the well-known Kubernetes signers will honor this field as long as the requested duration is not greater than the maximum duration they will honor per the --cluster-signing-duration CLI flag to the Kubernetes controller manager.  Certificate signers may not honor this field for various reasons:    1. Old signer that is unaware of the field (such as the in-tree      implementations prior to v1.22)   2. Signer whose configured maximum is shorter than the requested duration   3. Signer whose configured minimum is longer than the requested duration  The minimum valid value for expirationSeconds is 600, i.e. 10 minutes.
 * @member {Number} expirationSeconds
 */
IoK8sApiCertificatesV1CertificateSigningRequestSpec.prototype['expirationSeconds'] = undefined;

/**
 * extra contains extra attributes of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
 * @member {Object.<String, Array.<String>>} extra
 */
IoK8sApiCertificatesV1CertificateSigningRequestSpec.prototype['extra'] = undefined;

/**
 * groups contains group membership of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
 * @member {Array.<String>} groups
 */
IoK8sApiCertificatesV1CertificateSigningRequestSpec.prototype['groups'] = undefined;

/**
 * request contains an x509 certificate signing request encoded in a \"CERTIFICATE REQUEST\" PEM block. When serialized as JSON or YAML, the data is additionally base64-encoded.
 * @member {Blob} request
 */
IoK8sApiCertificatesV1CertificateSigningRequestSpec.prototype['request'] = undefined;

/**
 * signerName indicates the requested signer, and is a qualified name.  List/watch requests for CertificateSigningRequests can filter on this field using a \"spec.signerName=NAME\" fieldSelector.  Well-known Kubernetes signers are:  1. \"kubernetes.io/kube-apiserver-client\": issues client certificates that can be used to authenticate to kube-apiserver.   Requests for this signer are never auto-approved by kube-controller-manager, can be issued by the \"csrsigning\" controller in kube-controller-manager.  2. \"kubernetes.io/kube-apiserver-client-kubelet\": issues client certificates that kubelets use to authenticate to kube-apiserver.   Requests for this signer can be auto-approved by the \"csrapproving\" controller in kube-controller-manager, and can be issued by the \"csrsigning\" controller in kube-controller-manager.  3. \"kubernetes.io/kubelet-serving\" issues serving certificates that kubelets use to serve TLS endpoints, which kube-apiserver can connect to securely.   Requests for this signer are never auto-approved by kube-controller-manager, and can be issued by the \"csrsigning\" controller in kube-controller-manager.  More details are available at https://k8s.io/docs/reference/access-authn-authz/certificate-signing-requests/#kubernetes-signers  Custom signerNames can also be specified. The signer defines:  1. Trust distribution: how trust (CA bundles) are distributed.  2. Permitted subjects: and behavior when a disallowed subject is requested.  3. Required, permitted, or forbidden x509 extensions in the request (including whether subjectAltNames are allowed, which types, restrictions on allowed values) and behavior when a disallowed extension is requested.  4. Required, permitted, or forbidden key usages / extended key usages.  5. Expiration/certificate lifetime: whether it is fixed by the signer, configurable by the admin.  6. Whether or not requests for CA certificates are allowed.
 * @member {String} signerName
 */
IoK8sApiCertificatesV1CertificateSigningRequestSpec.prototype['signerName'] = undefined;

/**
 * uid contains the uid of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
 * @member {String} uid
 */
IoK8sApiCertificatesV1CertificateSigningRequestSpec.prototype['uid'] = undefined;

/**
 * usages specifies a set of key usages requested in the issued certificate.  Requests for TLS client certificates typically request: \"digital signature\", \"key encipherment\", \"client auth\".  Requests for TLS serving certificates typically request: \"key encipherment\", \"digital signature\", \"server auth\".  Valid values are:  \"signing\", \"digital signature\", \"content commitment\",  \"key encipherment\", \"key agreement\", \"data encipherment\",  \"cert sign\", \"crl sign\", \"encipher only\", \"decipher only\", \"any\",  \"server auth\", \"client auth\",  \"code signing\", \"email protection\", \"s/mime\",  \"ipsec end system\", \"ipsec tunnel\", \"ipsec user\",  \"timestamping\", \"ocsp signing\", \"microsoft sgc\", \"netscape sgc\"
 * @member {Array.<module:model/IoK8sApiCertificatesV1CertificateSigningRequestSpec.UsagesEnum>} usages
 */
IoK8sApiCertificatesV1CertificateSigningRequestSpec.prototype['usages'] = undefined;

/**
 * username contains the name of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
 * @member {String} username
 */
IoK8sApiCertificatesV1CertificateSigningRequestSpec.prototype['username'] = undefined;





/**
 * Allowed values for the <code>usages</code> property.
 * @enum {String}
 * @readonly
 */
IoK8sApiCertificatesV1CertificateSigningRequestSpec['UsagesEnum'] = {

    /**
     * value: "any"
     * @const
     */
    "any": "any",

    /**
     * value: "cert sign"
     * @const
     */
    "cert sign": "cert sign",

    /**
     * value: "client auth"
     * @const
     */
    "client auth": "client auth",

    /**
     * value: "code signing"
     * @const
     */
    "code signing": "code signing",

    /**
     * value: "content commitment"
     * @const
     */
    "content commitment": "content commitment",

    /**
     * value: "crl sign"
     * @const
     */
    "crl sign": "crl sign",

    /**
     * value: "data encipherment"
     * @const
     */
    "data encipherment": "data encipherment",

    /**
     * value: "decipher only"
     * @const
     */
    "decipher only": "decipher only",

    /**
     * value: "digital signature"
     * @const
     */
    "digital signature": "digital signature",

    /**
     * value: "email protection"
     * @const
     */
    "email protection": "email protection",

    /**
     * value: "encipher only"
     * @const
     */
    "encipher only": "encipher only",

    /**
     * value: "ipsec end system"
     * @const
     */
    "ipsec end system": "ipsec end system",

    /**
     * value: "ipsec tunnel"
     * @const
     */
    "ipsec tunnel": "ipsec tunnel",

    /**
     * value: "ipsec user"
     * @const
     */
    "ipsec user": "ipsec user",

    /**
     * value: "key agreement"
     * @const
     */
    "key agreement": "key agreement",

    /**
     * value: "key encipherment"
     * @const
     */
    "key encipherment": "key encipherment",

    /**
     * value: "microsoft sgc"
     * @const
     */
    "microsoft sgc": "microsoft sgc",

    /**
     * value: "netscape sgc"
     * @const
     */
    "netscape sgc": "netscape sgc",

    /**
     * value: "ocsp signing"
     * @const
     */
    "ocsp signing": "ocsp signing",

    /**
     * value: "s/mime"
     * @const
     */
    "s/mime": "s/mime",

    /**
     * value: "server auth"
     * @const
     */
    "server auth": "server auth",

    /**
     * value: "signing"
     * @const
     */
    "signing": "signing",

    /**
     * value: "timestamping"
     * @const
     */
    "timestamping": "timestamping"
};



export default IoK8sApiCertificatesV1CertificateSigningRequestSpec;

