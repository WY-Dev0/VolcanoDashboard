/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IoK8sApiCoreV1NodeSystemInfo model module.
 * @module model/IoK8sApiCoreV1NodeSystemInfo
 * @version v1.30.0
 */
class IoK8sApiCoreV1NodeSystemInfo {
    /**
     * Constructs a new <code>IoK8sApiCoreV1NodeSystemInfo</code>.
     * NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
     * @alias module:model/IoK8sApiCoreV1NodeSystemInfo
     * @param architecture {String} The Architecture reported by the node
     * @param bootID {String} Boot ID reported by the node.
     * @param containerRuntimeVersion {String} ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
     * @param kernelVersion {String} Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
     * @param kubeProxyVersion {String} KubeProxy Version reported by the node.
     * @param kubeletVersion {String} Kubelet Version reported by the node.
     * @param machineID {String} MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
     * @param operatingSystem {String} The Operating System reported by the node
     * @param osImage {String} OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
     * @param systemUUID {String} SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
     */
    constructor(architecture, bootID, containerRuntimeVersion, kernelVersion, kubeProxyVersion, kubeletVersion, machineID, operatingSystem, osImage, systemUUID) { 
        
        IoK8sApiCoreV1NodeSystemInfo.initialize(this, architecture, bootID, containerRuntimeVersion, kernelVersion, kubeProxyVersion, kubeletVersion, machineID, operatingSystem, osImage, systemUUID);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, architecture, bootID, containerRuntimeVersion, kernelVersion, kubeProxyVersion, kubeletVersion, machineID, operatingSystem, osImage, systemUUID) { 
        obj['architecture'] = architecture;
        obj['bootID'] = bootID;
        obj['containerRuntimeVersion'] = containerRuntimeVersion;
        obj['kernelVersion'] = kernelVersion;
        obj['kubeProxyVersion'] = kubeProxyVersion;
        obj['kubeletVersion'] = kubeletVersion;
        obj['machineID'] = machineID;
        obj['operatingSystem'] = operatingSystem;
        obj['osImage'] = osImage;
        obj['systemUUID'] = systemUUID;
    }

    /**
     * Constructs a <code>IoK8sApiCoreV1NodeSystemInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IoK8sApiCoreV1NodeSystemInfo} obj Optional instance to populate.
     * @return {module:model/IoK8sApiCoreV1NodeSystemInfo} The populated <code>IoK8sApiCoreV1NodeSystemInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IoK8sApiCoreV1NodeSystemInfo();

            if (data.hasOwnProperty('architecture')) {
                obj['architecture'] = ApiClient.convertToType(data['architecture'], 'String');
            }
            if (data.hasOwnProperty('bootID')) {
                obj['bootID'] = ApiClient.convertToType(data['bootID'], 'String');
            }
            if (data.hasOwnProperty('containerRuntimeVersion')) {
                obj['containerRuntimeVersion'] = ApiClient.convertToType(data['containerRuntimeVersion'], 'String');
            }
            if (data.hasOwnProperty('kernelVersion')) {
                obj['kernelVersion'] = ApiClient.convertToType(data['kernelVersion'], 'String');
            }
            if (data.hasOwnProperty('kubeProxyVersion')) {
                obj['kubeProxyVersion'] = ApiClient.convertToType(data['kubeProxyVersion'], 'String');
            }
            if (data.hasOwnProperty('kubeletVersion')) {
                obj['kubeletVersion'] = ApiClient.convertToType(data['kubeletVersion'], 'String');
            }
            if (data.hasOwnProperty('machineID')) {
                obj['machineID'] = ApiClient.convertToType(data['machineID'], 'String');
            }
            if (data.hasOwnProperty('operatingSystem')) {
                obj['operatingSystem'] = ApiClient.convertToType(data['operatingSystem'], 'String');
            }
            if (data.hasOwnProperty('osImage')) {
                obj['osImage'] = ApiClient.convertToType(data['osImage'], 'String');
            }
            if (data.hasOwnProperty('systemUUID')) {
                obj['systemUUID'] = ApiClient.convertToType(data['systemUUID'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IoK8sApiCoreV1NodeSystemInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IoK8sApiCoreV1NodeSystemInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IoK8sApiCoreV1NodeSystemInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['architecture'] && !(typeof data['architecture'] === 'string' || data['architecture'] instanceof String)) {
            throw new Error("Expected the field `architecture` to be a primitive type in the JSON string but got " + data['architecture']);
        }
        // ensure the json data is a string
        if (data['bootID'] && !(typeof data['bootID'] === 'string' || data['bootID'] instanceof String)) {
            throw new Error("Expected the field `bootID` to be a primitive type in the JSON string but got " + data['bootID']);
        }
        // ensure the json data is a string
        if (data['containerRuntimeVersion'] && !(typeof data['containerRuntimeVersion'] === 'string' || data['containerRuntimeVersion'] instanceof String)) {
            throw new Error("Expected the field `containerRuntimeVersion` to be a primitive type in the JSON string but got " + data['containerRuntimeVersion']);
        }
        // ensure the json data is a string
        if (data['kernelVersion'] && !(typeof data['kernelVersion'] === 'string' || data['kernelVersion'] instanceof String)) {
            throw new Error("Expected the field `kernelVersion` to be a primitive type in the JSON string but got " + data['kernelVersion']);
        }
        // ensure the json data is a string
        if (data['kubeProxyVersion'] && !(typeof data['kubeProxyVersion'] === 'string' || data['kubeProxyVersion'] instanceof String)) {
            throw new Error("Expected the field `kubeProxyVersion` to be a primitive type in the JSON string but got " + data['kubeProxyVersion']);
        }
        // ensure the json data is a string
        if (data['kubeletVersion'] && !(typeof data['kubeletVersion'] === 'string' || data['kubeletVersion'] instanceof String)) {
            throw new Error("Expected the field `kubeletVersion` to be a primitive type in the JSON string but got " + data['kubeletVersion']);
        }
        // ensure the json data is a string
        if (data['machineID'] && !(typeof data['machineID'] === 'string' || data['machineID'] instanceof String)) {
            throw new Error("Expected the field `machineID` to be a primitive type in the JSON string but got " + data['machineID']);
        }
        // ensure the json data is a string
        if (data['operatingSystem'] && !(typeof data['operatingSystem'] === 'string' || data['operatingSystem'] instanceof String)) {
            throw new Error("Expected the field `operatingSystem` to be a primitive type in the JSON string but got " + data['operatingSystem']);
        }
        // ensure the json data is a string
        if (data['osImage'] && !(typeof data['osImage'] === 'string' || data['osImage'] instanceof String)) {
            throw new Error("Expected the field `osImage` to be a primitive type in the JSON string but got " + data['osImage']);
        }
        // ensure the json data is a string
        if (data['systemUUID'] && !(typeof data['systemUUID'] === 'string' || data['systemUUID'] instanceof String)) {
            throw new Error("Expected the field `systemUUID` to be a primitive type in the JSON string but got " + data['systemUUID']);
        }

        return true;
    }


}

IoK8sApiCoreV1NodeSystemInfo.RequiredProperties = ["architecture", "bootID", "containerRuntimeVersion", "kernelVersion", "kubeProxyVersion", "kubeletVersion", "machineID", "operatingSystem", "osImage", "systemUUID"];

/**
 * The Architecture reported by the node
 * @member {String} architecture
 */
IoK8sApiCoreV1NodeSystemInfo.prototype['architecture'] = undefined;

/**
 * Boot ID reported by the node.
 * @member {String} bootID
 */
IoK8sApiCoreV1NodeSystemInfo.prototype['bootID'] = undefined;

/**
 * ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
 * @member {String} containerRuntimeVersion
 */
IoK8sApiCoreV1NodeSystemInfo.prototype['containerRuntimeVersion'] = undefined;

/**
 * Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
 * @member {String} kernelVersion
 */
IoK8sApiCoreV1NodeSystemInfo.prototype['kernelVersion'] = undefined;

/**
 * KubeProxy Version reported by the node.
 * @member {String} kubeProxyVersion
 */
IoK8sApiCoreV1NodeSystemInfo.prototype['kubeProxyVersion'] = undefined;

/**
 * Kubelet Version reported by the node.
 * @member {String} kubeletVersion
 */
IoK8sApiCoreV1NodeSystemInfo.prototype['kubeletVersion'] = undefined;

/**
 * MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
 * @member {String} machineID
 */
IoK8sApiCoreV1NodeSystemInfo.prototype['machineID'] = undefined;

/**
 * The Operating System reported by the node
 * @member {String} operatingSystem
 */
IoK8sApiCoreV1NodeSystemInfo.prototype['operatingSystem'] = undefined;

/**
 * OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
 * @member {String} osImage
 */
IoK8sApiCoreV1NodeSystemInfo.prototype['osImage'] = undefined;

/**
 * SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
 * @member {String} systemUUID
 */
IoK8sApiCoreV1NodeSystemInfo.prototype['systemUUID'] = undefined;






export default IoK8sApiCoreV1NodeSystemInfo;

