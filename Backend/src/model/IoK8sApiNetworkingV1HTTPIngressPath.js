/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IoK8sApiNetworkingV1IngressBackend from './IoK8sApiNetworkingV1IngressBackend';

/**
 * The IoK8sApiNetworkingV1HTTPIngressPath model module.
 * @module model/IoK8sApiNetworkingV1HTTPIngressPath
 * @version v1.30.0
 */
class IoK8sApiNetworkingV1HTTPIngressPath {
    /**
     * Constructs a new <code>IoK8sApiNetworkingV1HTTPIngressPath</code>.
     * HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.
     * @alias module:model/IoK8sApiNetworkingV1HTTPIngressPath
     * @param backend {module:model/IoK8sApiNetworkingV1IngressBackend} 
     * @param pathType {module:model/IoK8sApiNetworkingV1HTTPIngressPath.PathTypeEnum} pathType determines the interpretation of the path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is   done on a path element by element basis. A path element refers is the   list of labels in the path split by the '/' separator. A request is a   match for path p if every p is an element-wise prefix of p of the   request path. Note that if the last element of the path is a substring   of the last element in request path, it is not a match (e.g. /foo/bar   matches /foo/bar/baz, but does not match /foo/barbaz). * ImplementationSpecific: Interpretation of the Path matching is up to   the IngressClass. Implementations can treat this as a separate PathType   or treat it identically to Prefix or Exact path types. Implementations are required to support all path types.  Possible enum values:  - `\"Exact\"` matches the URL path exactly and with case sensitivity.  - `\"ImplementationSpecific\"` matching is up to the IngressClass. Implementations can treat this as a separate PathType or treat it identically to Prefix or Exact path types.  - `\"Prefix\"` matches based on a URL path prefix split by '/'. Matching is case sensitive and done on a path element by element basis. A path element refers to the list of labels in the path split by the '/' separator. A request is a match for path p if every p is an element-wise prefix of p of the request path. Note that if the last element of the path is a substring of the last element in request path, it is not a match (e.g. /foo/bar matches /foo/bar/baz, but does not match /foo/barbaz). If multiple matching paths exist in an Ingress spec, the longest matching path is given priority. Examples: - /foo/bar does not match requests to /foo/barbaz - /foo/bar matches request to /foo/bar and /foo/bar/baz - /foo and /foo/ both match requests to /foo and /foo/. If both paths are present in an Ingress spec, the longest matching path (/foo/) is given priority.
     */
    constructor(backend, pathType) { 
        
        IoK8sApiNetworkingV1HTTPIngressPath.initialize(this, backend, pathType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, backend, pathType) { 
        obj['backend'] = backend;
        obj['pathType'] = pathType;
    }

    /**
     * Constructs a <code>IoK8sApiNetworkingV1HTTPIngressPath</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IoK8sApiNetworkingV1HTTPIngressPath} obj Optional instance to populate.
     * @return {module:model/IoK8sApiNetworkingV1HTTPIngressPath} The populated <code>IoK8sApiNetworkingV1HTTPIngressPath</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IoK8sApiNetworkingV1HTTPIngressPath();

            if (data.hasOwnProperty('backend')) {
                obj['backend'] = IoK8sApiNetworkingV1IngressBackend.constructFromObject(data['backend']);
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('pathType')) {
                obj['pathType'] = ApiClient.convertToType(data['pathType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IoK8sApiNetworkingV1HTTPIngressPath</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IoK8sApiNetworkingV1HTTPIngressPath</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IoK8sApiNetworkingV1HTTPIngressPath.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `backend`
        if (data['backend']) { // data not null
          IoK8sApiNetworkingV1IngressBackend.validateJSON(data['backend']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['pathType'] && !(typeof data['pathType'] === 'string' || data['pathType'] instanceof String)) {
            throw new Error("Expected the field `pathType` to be a primitive type in the JSON string but got " + data['pathType']);
        }

        return true;
    }


}

IoK8sApiNetworkingV1HTTPIngressPath.RequiredProperties = ["backend", "pathType"];

/**
 * @member {module:model/IoK8sApiNetworkingV1IngressBackend} backend
 */
IoK8sApiNetworkingV1HTTPIngressPath.prototype['backend'] = undefined;

/**
 * path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value \"Exact\" or \"Prefix\".
 * @member {String} path
 */
IoK8sApiNetworkingV1HTTPIngressPath.prototype['path'] = undefined;

/**
 * pathType determines the interpretation of the path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is   done on a path element by element basis. A path element refers is the   list of labels in the path split by the '/' separator. A request is a   match for path p if every p is an element-wise prefix of p of the   request path. Note that if the last element of the path is a substring   of the last element in request path, it is not a match (e.g. /foo/bar   matches /foo/bar/baz, but does not match /foo/barbaz). * ImplementationSpecific: Interpretation of the Path matching is up to   the IngressClass. Implementations can treat this as a separate PathType   or treat it identically to Prefix or Exact path types. Implementations are required to support all path types.  Possible enum values:  - `\"Exact\"` matches the URL path exactly and with case sensitivity.  - `\"ImplementationSpecific\"` matching is up to the IngressClass. Implementations can treat this as a separate PathType or treat it identically to Prefix or Exact path types.  - `\"Prefix\"` matches based on a URL path prefix split by '/'. Matching is case sensitive and done on a path element by element basis. A path element refers to the list of labels in the path split by the '/' separator. A request is a match for path p if every p is an element-wise prefix of p of the request path. Note that if the last element of the path is a substring of the last element in request path, it is not a match (e.g. /foo/bar matches /foo/bar/baz, but does not match /foo/barbaz). If multiple matching paths exist in an Ingress spec, the longest matching path is given priority. Examples: - /foo/bar does not match requests to /foo/barbaz - /foo/bar matches request to /foo/bar and /foo/bar/baz - /foo and /foo/ both match requests to /foo and /foo/. If both paths are present in an Ingress spec, the longest matching path (/foo/) is given priority.
 * @member {module:model/IoK8sApiNetworkingV1HTTPIngressPath.PathTypeEnum} pathType
 */
IoK8sApiNetworkingV1HTTPIngressPath.prototype['pathType'] = undefined;





/**
 * Allowed values for the <code>pathType</code> property.
 * @enum {String}
 * @readonly
 */
IoK8sApiNetworkingV1HTTPIngressPath['PathTypeEnum'] = {

    /**
     * value: "Exact"
     * @const
     */
    "Exact": "Exact",

    /**
     * value: "ImplementationSpecific"
     * @const
     */
    "ImplementationSpecific": "ImplementationSpecific",

    /**
     * value: "Prefix"
     * @const
     */
    "Prefix": "Prefix"
};



export default IoK8sApiNetworkingV1HTTPIngressPath;

