/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IoK8sApiCoreV1NodeSelectorTerm from './IoK8sApiCoreV1NodeSelectorTerm';

/**
 * The IoK8sApiCoreV1NodeSelector model module.
 * @module model/IoK8sApiCoreV1NodeSelector
 * @version v1.30.0
 */
class IoK8sApiCoreV1NodeSelector {
    /**
     * Constructs a new <code>IoK8sApiCoreV1NodeSelector</code>.
     * A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
     * @alias module:model/IoK8sApiCoreV1NodeSelector
     * @param nodeSelectorTerms {Array.<module:model/IoK8sApiCoreV1NodeSelectorTerm>} Required. A list of node selector terms. The terms are ORed.
     */
    constructor(nodeSelectorTerms) { 
        
        IoK8sApiCoreV1NodeSelector.initialize(this, nodeSelectorTerms);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, nodeSelectorTerms) { 
        obj['nodeSelectorTerms'] = nodeSelectorTerms;
    }

    /**
     * Constructs a <code>IoK8sApiCoreV1NodeSelector</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IoK8sApiCoreV1NodeSelector} obj Optional instance to populate.
     * @return {module:model/IoK8sApiCoreV1NodeSelector} The populated <code>IoK8sApiCoreV1NodeSelector</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IoK8sApiCoreV1NodeSelector();

            if (data.hasOwnProperty('nodeSelectorTerms')) {
                obj['nodeSelectorTerms'] = ApiClient.convertToType(data['nodeSelectorTerms'], [IoK8sApiCoreV1NodeSelectorTerm]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IoK8sApiCoreV1NodeSelector</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IoK8sApiCoreV1NodeSelector</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IoK8sApiCoreV1NodeSelector.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['nodeSelectorTerms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nodeSelectorTerms'])) {
                throw new Error("Expected the field `nodeSelectorTerms` to be an array in the JSON data but got " + data['nodeSelectorTerms']);
            }
            // validate the optional field `nodeSelectorTerms` (array)
            for (const item of data['nodeSelectorTerms']) {
                IoK8sApiCoreV1NodeSelectorTerm.validateJSON(item);
            };
        }

        return true;
    }


}

IoK8sApiCoreV1NodeSelector.RequiredProperties = ["nodeSelectorTerms"];

/**
 * Required. A list of node selector terms. The terms are ORed.
 * @member {Array.<module:model/IoK8sApiCoreV1NodeSelectorTerm>} nodeSelectorTerms
 */
IoK8sApiCoreV1NodeSelector.prototype['nodeSelectorTerms'] = undefined;






export default IoK8sApiCoreV1NodeSelector;

