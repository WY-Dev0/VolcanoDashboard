/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IoK8sApiCoreV1VolumeMount model module.
 * @module model/IoK8sApiCoreV1VolumeMount
 * @version v1.30.0
 */
class IoK8sApiCoreV1VolumeMount {
    /**
     * Constructs a new <code>IoK8sApiCoreV1VolumeMount</code>.
     * VolumeMount describes a mounting of a Volume within a container.
     * @alias module:model/IoK8sApiCoreV1VolumeMount
     * @param mountPath {String} Path within the container at which the volume should be mounted.  Must not contain ':'.
     * @param name {String} This must match the Name of a Volume.
     */
    constructor(mountPath, name) { 
        
        IoK8sApiCoreV1VolumeMount.initialize(this, mountPath, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, mountPath, name) { 
        obj['mountPath'] = mountPath;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>IoK8sApiCoreV1VolumeMount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IoK8sApiCoreV1VolumeMount} obj Optional instance to populate.
     * @return {module:model/IoK8sApiCoreV1VolumeMount} The populated <code>IoK8sApiCoreV1VolumeMount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IoK8sApiCoreV1VolumeMount();

            if (data.hasOwnProperty('mountPath')) {
                obj['mountPath'] = ApiClient.convertToType(data['mountPath'], 'String');
            }
            if (data.hasOwnProperty('mountPropagation')) {
                obj['mountPropagation'] = ApiClient.convertToType(data['mountPropagation'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('readOnly')) {
                obj['readOnly'] = ApiClient.convertToType(data['readOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('recursiveReadOnly')) {
                obj['recursiveReadOnly'] = ApiClient.convertToType(data['recursiveReadOnly'], 'String');
            }
            if (data.hasOwnProperty('subPath')) {
                obj['subPath'] = ApiClient.convertToType(data['subPath'], 'String');
            }
            if (data.hasOwnProperty('subPathExpr')) {
                obj['subPathExpr'] = ApiClient.convertToType(data['subPathExpr'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IoK8sApiCoreV1VolumeMount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IoK8sApiCoreV1VolumeMount</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IoK8sApiCoreV1VolumeMount.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['mountPath'] && !(typeof data['mountPath'] === 'string' || data['mountPath'] instanceof String)) {
            throw new Error("Expected the field `mountPath` to be a primitive type in the JSON string but got " + data['mountPath']);
        }
        // ensure the json data is a string
        if (data['mountPropagation'] && !(typeof data['mountPropagation'] === 'string' || data['mountPropagation'] instanceof String)) {
            throw new Error("Expected the field `mountPropagation` to be a primitive type in the JSON string but got " + data['mountPropagation']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['recursiveReadOnly'] && !(typeof data['recursiveReadOnly'] === 'string' || data['recursiveReadOnly'] instanceof String)) {
            throw new Error("Expected the field `recursiveReadOnly` to be a primitive type in the JSON string but got " + data['recursiveReadOnly']);
        }
        // ensure the json data is a string
        if (data['subPath'] && !(typeof data['subPath'] === 'string' || data['subPath'] instanceof String)) {
            throw new Error("Expected the field `subPath` to be a primitive type in the JSON string but got " + data['subPath']);
        }
        // ensure the json data is a string
        if (data['subPathExpr'] && !(typeof data['subPathExpr'] === 'string' || data['subPathExpr'] instanceof String)) {
            throw new Error("Expected the field `subPathExpr` to be a primitive type in the JSON string but got " + data['subPathExpr']);
        }

        return true;
    }


}

IoK8sApiCoreV1VolumeMount.RequiredProperties = ["mountPath", "name"];

/**
 * Path within the container at which the volume should be mounted.  Must not contain ':'.
 * @member {String} mountPath
 */
IoK8sApiCoreV1VolumeMount.prototype['mountPath'] = undefined;

/**
 * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10. When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified (which defaults to None).  Possible enum values:  - `\"Bidirectional\"` means that the volume in a container will receive new mounts from the host or other containers, and its own mounts will be propagated from the container to the host or other containers. Note that this mode is recursively applied to all mounts in the volume (\"rshared\" in Linux terminology).  - `\"HostToContainer\"` means that the volume in a container will receive new mounts from the host or other containers, but filesystems mounted inside the container won't be propagated to the host or other containers. Note that this mode is recursively applied to all mounts in the volume (\"rslave\" in Linux terminology).  - `\"None\"` means that the volume in a container will not receive new mounts from the host or other containers, and filesystems mounted inside the container won't be propagated to the host or other containers. Note that this mode corresponds to \"private\" in Linux terminology.
 * @member {module:model/IoK8sApiCoreV1VolumeMount.MountPropagationEnum} mountPropagation
 */
IoK8sApiCoreV1VolumeMount.prototype['mountPropagation'] = undefined;

/**
 * This must match the Name of a Volume.
 * @member {String} name
 */
IoK8sApiCoreV1VolumeMount.prototype['name'] = undefined;

/**
 * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
 * @member {Boolean} readOnly
 */
IoK8sApiCoreV1VolumeMount.prototype['readOnly'] = undefined;

/**
 * RecursiveReadOnly specifies whether read-only mounts should be handled recursively.  If ReadOnly is false, this field has no meaning and must be unspecified.  If ReadOnly is true, and this field is set to Disabled, the mount is not made recursively read-only.  If this field is set to IfPossible, the mount is made recursively read-only, if it is supported by the container runtime.  If this field is set to Enabled, the mount is made recursively read-only if it is supported by the container runtime, otherwise the pod will not be started and an error will be generated to indicate the reason.  If this field is set to IfPossible or Enabled, MountPropagation must be set to None (or be unspecified, which defaults to None).  If this field is not specified, it is treated as an equivalent of Disabled.
 * @member {String} recursiveReadOnly
 */
IoK8sApiCoreV1VolumeMount.prototype['recursiveReadOnly'] = undefined;

/**
 * Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).
 * @member {String} subPath
 */
IoK8sApiCoreV1VolumeMount.prototype['subPath'] = undefined;

/**
 * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.
 * @member {String} subPathExpr
 */
IoK8sApiCoreV1VolumeMount.prototype['subPathExpr'] = undefined;





/**
 * Allowed values for the <code>mountPropagation</code> property.
 * @enum {String}
 * @readonly
 */
IoK8sApiCoreV1VolumeMount['MountPropagationEnum'] = {

    /**
     * value: "Bidirectional"
     * @const
     */
    "Bidirectional": "Bidirectional",

    /**
     * value: "HostToContainer"
     * @const
     */
    "HostToContainer": "HostToContainer",

    /**
     * value: "None"
     * @const
     */
    "None": "None"
};



export default IoK8sApiCoreV1VolumeMount;

