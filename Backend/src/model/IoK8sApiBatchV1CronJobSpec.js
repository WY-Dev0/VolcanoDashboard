/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IoK8sApiBatchV1JobTemplateSpec from './IoK8sApiBatchV1JobTemplateSpec';

/**
 * The IoK8sApiBatchV1CronJobSpec model module.
 * @module model/IoK8sApiBatchV1CronJobSpec
 * @version v1.30.0
 */
class IoK8sApiBatchV1CronJobSpec {
    /**
     * Constructs a new <code>IoK8sApiBatchV1CronJobSpec</code>.
     * CronJobSpec describes how the job execution will look like and when it will actually run.
     * @alias module:model/IoK8sApiBatchV1CronJobSpec
     * @param jobTemplate {module:model/IoK8sApiBatchV1JobTemplateSpec} 
     * @param schedule {String} The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
     */
    constructor(jobTemplate, schedule) { 
        
        IoK8sApiBatchV1CronJobSpec.initialize(this, jobTemplate, schedule);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, jobTemplate, schedule) { 
        obj['jobTemplate'] = jobTemplate;
        obj['schedule'] = schedule;
    }

    /**
     * Constructs a <code>IoK8sApiBatchV1CronJobSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IoK8sApiBatchV1CronJobSpec} obj Optional instance to populate.
     * @return {module:model/IoK8sApiBatchV1CronJobSpec} The populated <code>IoK8sApiBatchV1CronJobSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IoK8sApiBatchV1CronJobSpec();

            if (data.hasOwnProperty('concurrencyPolicy')) {
                obj['concurrencyPolicy'] = ApiClient.convertToType(data['concurrencyPolicy'], 'String');
            }
            if (data.hasOwnProperty('failedJobsHistoryLimit')) {
                obj['failedJobsHistoryLimit'] = ApiClient.convertToType(data['failedJobsHistoryLimit'], 'Number');
            }
            if (data.hasOwnProperty('jobTemplate')) {
                obj['jobTemplate'] = IoK8sApiBatchV1JobTemplateSpec.constructFromObject(data['jobTemplate']);
            }
            if (data.hasOwnProperty('schedule')) {
                obj['schedule'] = ApiClient.convertToType(data['schedule'], 'String');
            }
            if (data.hasOwnProperty('startingDeadlineSeconds')) {
                obj['startingDeadlineSeconds'] = ApiClient.convertToType(data['startingDeadlineSeconds'], 'Number');
            }
            if (data.hasOwnProperty('successfulJobsHistoryLimit')) {
                obj['successfulJobsHistoryLimit'] = ApiClient.convertToType(data['successfulJobsHistoryLimit'], 'Number');
            }
            if (data.hasOwnProperty('suspend')) {
                obj['suspend'] = ApiClient.convertToType(data['suspend'], 'Boolean');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IoK8sApiBatchV1CronJobSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IoK8sApiBatchV1CronJobSpec</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IoK8sApiBatchV1CronJobSpec.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['concurrencyPolicy'] && !(typeof data['concurrencyPolicy'] === 'string' || data['concurrencyPolicy'] instanceof String)) {
            throw new Error("Expected the field `concurrencyPolicy` to be a primitive type in the JSON string but got " + data['concurrencyPolicy']);
        }
        // validate the optional field `jobTemplate`
        if (data['jobTemplate']) { // data not null
          IoK8sApiBatchV1JobTemplateSpec.validateJSON(data['jobTemplate']);
        }
        // ensure the json data is a string
        if (data['schedule'] && !(typeof data['schedule'] === 'string' || data['schedule'] instanceof String)) {
            throw new Error("Expected the field `schedule` to be a primitive type in the JSON string but got " + data['schedule']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }

        return true;
    }


}

IoK8sApiBatchV1CronJobSpec.RequiredProperties = ["jobTemplate", "schedule"];

/**
 * Specifies how to treat concurrent executions of a Job. Valid values are:  - \"Allow\" (default): allows CronJobs to run concurrently; - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - \"Replace\": cancels currently running job and replaces it with a new one  Possible enum values:  - `\"Allow\"` allows CronJobs to run concurrently.  - `\"Forbid\"` forbids concurrent runs, skipping next run if previous hasn't finished yet.  - `\"Replace\"` cancels currently running job and replaces it with a new one.
 * @member {module:model/IoK8sApiBatchV1CronJobSpec.ConcurrencyPolicyEnum} concurrencyPolicy
 */
IoK8sApiBatchV1CronJobSpec.prototype['concurrencyPolicy'] = undefined;

/**
 * The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.
 * @member {Number} failedJobsHistoryLimit
 */
IoK8sApiBatchV1CronJobSpec.prototype['failedJobsHistoryLimit'] = undefined;

/**
 * @member {module:model/IoK8sApiBatchV1JobTemplateSpec} jobTemplate
 */
IoK8sApiBatchV1CronJobSpec.prototype['jobTemplate'] = undefined;

/**
 * The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
 * @member {String} schedule
 */
IoK8sApiBatchV1CronJobSpec.prototype['schedule'] = undefined;

/**
 * Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
 * @member {Number} startingDeadlineSeconds
 */
IoK8sApiBatchV1CronJobSpec.prototype['startingDeadlineSeconds'] = undefined;

/**
 * The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to 3.
 * @member {Number} successfulJobsHistoryLimit
 */
IoK8sApiBatchV1CronJobSpec.prototype['successfulJobsHistoryLimit'] = undefined;

/**
 * This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
 * @member {Boolean} suspend
 */
IoK8sApiBatchV1CronJobSpec.prototype['suspend'] = undefined;

/**
 * The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will default to the time zone of the kube-controller-manager process. The set of valid time zone names and the time zone offset is loaded from the system-wide time zone database by the API server during CronJob validation and the controller manager during execution. If no system-wide time zone database can be found a bundled version of the database is used instead. If the time zone name becomes invalid during the lifetime of a CronJob or due to a change in host configuration, the controller will stop creating new new Jobs and will create a system event with the reason UnknownTimeZone. More information can be found in https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones
 * @member {String} timeZone
 */
IoK8sApiBatchV1CronJobSpec.prototype['timeZone'] = undefined;





/**
 * Allowed values for the <code>concurrencyPolicy</code> property.
 * @enum {String}
 * @readonly
 */
IoK8sApiBatchV1CronJobSpec['ConcurrencyPolicyEnum'] = {

    /**
     * value: "Allow"
     * @const
     */
    "Allow": "Allow",

    /**
     * value: "Forbid"
     * @const
     */
    "Forbid": "Forbid",

    /**
     * value: "Replace"
     * @const
     */
    "Replace": "Replace"
};



export default IoK8sApiBatchV1CronJobSpec;

