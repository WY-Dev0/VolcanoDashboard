/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IoK8sApiNodeV1Overhead from './IoK8sApiNodeV1Overhead';
import IoK8sApiNodeV1Scheduling from './IoK8sApiNodeV1Scheduling';
import IoK8sApimachineryPkgApisMetaV1ObjectMeta from './IoK8sApimachineryPkgApisMetaV1ObjectMeta';

/**
 * The IoK8sApiNodeV1RuntimeClass model module.
 * @module model/IoK8sApiNodeV1RuntimeClass
 * @version v1.30.0
 */
class IoK8sApiNodeV1RuntimeClass {
    /**
     * Constructs a new <code>IoK8sApiNodeV1RuntimeClass</code>.
     * RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a pod. RuntimeClasses are manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod.  For more details, see https://kubernetes.io/docs/concepts/containers/runtime-class/
     * @alias module:model/IoK8sApiNodeV1RuntimeClass
     * @param handler {String} handler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node & CRI configuration.  It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called \"runc\" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The Handler must be lowercase, conform to the DNS Label (RFC 1123) requirements, and is immutable.
     */
    constructor(handler) { 
        
        IoK8sApiNodeV1RuntimeClass.initialize(this, handler);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, handler) { 
        obj['handler'] = handler;
    }

    /**
     * Constructs a <code>IoK8sApiNodeV1RuntimeClass</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IoK8sApiNodeV1RuntimeClass} obj Optional instance to populate.
     * @return {module:model/IoK8sApiNodeV1RuntimeClass} The populated <code>IoK8sApiNodeV1RuntimeClass</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IoK8sApiNodeV1RuntimeClass();

            if (data.hasOwnProperty('apiVersion')) {
                obj['apiVersion'] = ApiClient.convertToType(data['apiVersion'], 'String');
            }
            if (data.hasOwnProperty('handler')) {
                obj['handler'] = ApiClient.convertToType(data['handler'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = IoK8sApimachineryPkgApisMetaV1ObjectMeta.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('overhead')) {
                obj['overhead'] = IoK8sApiNodeV1Overhead.constructFromObject(data['overhead']);
            }
            if (data.hasOwnProperty('scheduling')) {
                obj['scheduling'] = IoK8sApiNodeV1Scheduling.constructFromObject(data['scheduling']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IoK8sApiNodeV1RuntimeClass</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IoK8sApiNodeV1RuntimeClass</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IoK8sApiNodeV1RuntimeClass.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['apiVersion'] && !(typeof data['apiVersion'] === 'string' || data['apiVersion'] instanceof String)) {
            throw new Error("Expected the field `apiVersion` to be a primitive type in the JSON string but got " + data['apiVersion']);
        }
        // ensure the json data is a string
        if (data['handler'] && !(typeof data['handler'] === 'string' || data['handler'] instanceof String)) {
            throw new Error("Expected the field `handler` to be a primitive type in the JSON string but got " + data['handler']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          IoK8sApimachineryPkgApisMetaV1ObjectMeta.validateJSON(data['metadata']);
        }
        // validate the optional field `overhead`
        if (data['overhead']) { // data not null
          IoK8sApiNodeV1Overhead.validateJSON(data['overhead']);
        }
        // validate the optional field `scheduling`
        if (data['scheduling']) { // data not null
          IoK8sApiNodeV1Scheduling.validateJSON(data['scheduling']);
        }

        return true;
    }


}

IoK8sApiNodeV1RuntimeClass.RequiredProperties = ["handler"];

/**
 * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
 * @member {String} apiVersion
 */
IoK8sApiNodeV1RuntimeClass.prototype['apiVersion'] = undefined;

/**
 * handler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node & CRI configuration.  It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called \"runc\" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The Handler must be lowercase, conform to the DNS Label (RFC 1123) requirements, and is immutable.
 * @member {String} handler
 */
IoK8sApiNodeV1RuntimeClass.prototype['handler'] = undefined;

/**
 * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
 * @member {String} kind
 */
IoK8sApiNodeV1RuntimeClass.prototype['kind'] = undefined;

/**
 * @member {module:model/IoK8sApimachineryPkgApisMetaV1ObjectMeta} metadata
 */
IoK8sApiNodeV1RuntimeClass.prototype['metadata'] = undefined;

/**
 * @member {module:model/IoK8sApiNodeV1Overhead} overhead
 */
IoK8sApiNodeV1RuntimeClass.prototype['overhead'] = undefined;

/**
 * @member {module:model/IoK8sApiNodeV1Scheduling} scheduling
 */
IoK8sApiNodeV1RuntimeClass.prototype['scheduling'] = undefined;






export default IoK8sApiNodeV1RuntimeClass;

