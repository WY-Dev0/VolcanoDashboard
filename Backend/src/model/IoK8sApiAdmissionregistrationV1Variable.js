/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IoK8sApiAdmissionregistrationV1Variable model module.
 * @module model/IoK8sApiAdmissionregistrationV1Variable
 * @version v1.30.0
 */
class IoK8sApiAdmissionregistrationV1Variable {
    /**
     * Constructs a new <code>IoK8sApiAdmissionregistrationV1Variable</code>.
     * Variable is the definition of a variable that is used for composition. A variable is defined as a named expression.
     * @alias module:model/IoK8sApiAdmissionregistrationV1Variable
     * @param expression {String} Expression is the expression that will be evaluated as the value of the variable. The CEL expression has access to the same identifiers as the CEL expressions in Validation.
     * @param name {String} Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables. The variable can be accessed in other expressions through `variables` For example, if name is \"foo\", the variable will be available as `variables.foo`
     */
    constructor(expression, name) { 
        
        IoK8sApiAdmissionregistrationV1Variable.initialize(this, expression, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, expression, name) { 
        obj['expression'] = expression;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>IoK8sApiAdmissionregistrationV1Variable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IoK8sApiAdmissionregistrationV1Variable} obj Optional instance to populate.
     * @return {module:model/IoK8sApiAdmissionregistrationV1Variable} The populated <code>IoK8sApiAdmissionregistrationV1Variable</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IoK8sApiAdmissionregistrationV1Variable();

            if (data.hasOwnProperty('expression')) {
                obj['expression'] = ApiClient.convertToType(data['expression'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IoK8sApiAdmissionregistrationV1Variable</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IoK8sApiAdmissionregistrationV1Variable</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IoK8sApiAdmissionregistrationV1Variable.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['expression'] && !(typeof data['expression'] === 'string' || data['expression'] instanceof String)) {
            throw new Error("Expected the field `expression` to be a primitive type in the JSON string but got " + data['expression']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

IoK8sApiAdmissionregistrationV1Variable.RequiredProperties = ["expression", "name"];

/**
 * Expression is the expression that will be evaluated as the value of the variable. The CEL expression has access to the same identifiers as the CEL expressions in Validation.
 * @member {String} expression
 */
IoK8sApiAdmissionregistrationV1Variable.prototype['expression'] = undefined;

/**
 * Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables. The variable can be accessed in other expressions through `variables` For example, if name is \"foo\", the variable will be available as `variables.foo`
 * @member {String} name
 */
IoK8sApiAdmissionregistrationV1Variable.prototype['name'] = undefined;






export default IoK8sApiAdmissionregistrationV1Variable;

