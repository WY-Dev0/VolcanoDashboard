/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IoK8sApiCoreV1AppArmorProfile from './IoK8sApiCoreV1AppArmorProfile';
import IoK8sApiCoreV1SELinuxOptions from './IoK8sApiCoreV1SELinuxOptions';
import IoK8sApiCoreV1SeccompProfile from './IoK8sApiCoreV1SeccompProfile';
import IoK8sApiCoreV1Sysctl from './IoK8sApiCoreV1Sysctl';
import IoK8sApiCoreV1WindowsSecurityContextOptions from './IoK8sApiCoreV1WindowsSecurityContextOptions';

/**
 * The IoK8sApiCoreV1PodSecurityContext model module.
 * @module model/IoK8sApiCoreV1PodSecurityContext
 * @version v1.30.0
 */
class IoK8sApiCoreV1PodSecurityContext {
    /**
     * Constructs a new <code>IoK8sApiCoreV1PodSecurityContext</code>.
     * PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
     * @alias module:model/IoK8sApiCoreV1PodSecurityContext
     */
    constructor() { 
        
        IoK8sApiCoreV1PodSecurityContext.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IoK8sApiCoreV1PodSecurityContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IoK8sApiCoreV1PodSecurityContext} obj Optional instance to populate.
     * @return {module:model/IoK8sApiCoreV1PodSecurityContext} The populated <code>IoK8sApiCoreV1PodSecurityContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IoK8sApiCoreV1PodSecurityContext();

            if (data.hasOwnProperty('appArmorProfile')) {
                obj['appArmorProfile'] = IoK8sApiCoreV1AppArmorProfile.constructFromObject(data['appArmorProfile']);
            }
            if (data.hasOwnProperty('fsGroup')) {
                obj['fsGroup'] = ApiClient.convertToType(data['fsGroup'], 'Number');
            }
            if (data.hasOwnProperty('fsGroupChangePolicy')) {
                obj['fsGroupChangePolicy'] = ApiClient.convertToType(data['fsGroupChangePolicy'], 'String');
            }
            if (data.hasOwnProperty('runAsGroup')) {
                obj['runAsGroup'] = ApiClient.convertToType(data['runAsGroup'], 'Number');
            }
            if (data.hasOwnProperty('runAsNonRoot')) {
                obj['runAsNonRoot'] = ApiClient.convertToType(data['runAsNonRoot'], 'Boolean');
            }
            if (data.hasOwnProperty('runAsUser')) {
                obj['runAsUser'] = ApiClient.convertToType(data['runAsUser'], 'Number');
            }
            if (data.hasOwnProperty('seLinuxOptions')) {
                obj['seLinuxOptions'] = IoK8sApiCoreV1SELinuxOptions.constructFromObject(data['seLinuxOptions']);
            }
            if (data.hasOwnProperty('seccompProfile')) {
                obj['seccompProfile'] = IoK8sApiCoreV1SeccompProfile.constructFromObject(data['seccompProfile']);
            }
            if (data.hasOwnProperty('supplementalGroups')) {
                obj['supplementalGroups'] = ApiClient.convertToType(data['supplementalGroups'], ['Number']);
            }
            if (data.hasOwnProperty('sysctls')) {
                obj['sysctls'] = ApiClient.convertToType(data['sysctls'], [IoK8sApiCoreV1Sysctl]);
            }
            if (data.hasOwnProperty('windowsOptions')) {
                obj['windowsOptions'] = IoK8sApiCoreV1WindowsSecurityContextOptions.constructFromObject(data['windowsOptions']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IoK8sApiCoreV1PodSecurityContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IoK8sApiCoreV1PodSecurityContext</code>.
     */
    static validateJSON(data) {
        // validate the optional field `appArmorProfile`
        if (data['appArmorProfile']) { // data not null
          IoK8sApiCoreV1AppArmorProfile.validateJSON(data['appArmorProfile']);
        }
        // ensure the json data is a string
        if (data['fsGroupChangePolicy'] && !(typeof data['fsGroupChangePolicy'] === 'string' || data['fsGroupChangePolicy'] instanceof String)) {
            throw new Error("Expected the field `fsGroupChangePolicy` to be a primitive type in the JSON string but got " + data['fsGroupChangePolicy']);
        }
        // validate the optional field `seLinuxOptions`
        if (data['seLinuxOptions']) { // data not null
          IoK8sApiCoreV1SELinuxOptions.validateJSON(data['seLinuxOptions']);
        }
        // validate the optional field `seccompProfile`
        if (data['seccompProfile']) { // data not null
          IoK8sApiCoreV1SeccompProfile.validateJSON(data['seccompProfile']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supplementalGroups'])) {
            throw new Error("Expected the field `supplementalGroups` to be an array in the JSON data but got " + data['supplementalGroups']);
        }
        if (data['sysctls']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sysctls'])) {
                throw new Error("Expected the field `sysctls` to be an array in the JSON data but got " + data['sysctls']);
            }
            // validate the optional field `sysctls` (array)
            for (const item of data['sysctls']) {
                IoK8sApiCoreV1Sysctl.validateJSON(item);
            };
        }
        // validate the optional field `windowsOptions`
        if (data['windowsOptions']) { // data not null
          IoK8sApiCoreV1WindowsSecurityContextOptions.validateJSON(data['windowsOptions']);
        }

        return true;
    }


}



/**
 * @member {module:model/IoK8sApiCoreV1AppArmorProfile} appArmorProfile
 */
IoK8sApiCoreV1PodSecurityContext.prototype['appArmorProfile'] = undefined;

/**
 * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
 * @member {Number} fsGroup
 */
IoK8sApiCoreV1PodSecurityContext.prototype['fsGroup'] = undefined;

/**
 * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used. Note that this field cannot be set when spec.os.name is windows.  Possible enum values:  - `\"Always\"` indicates that volume's ownership and permissions should always be changed whenever volume is mounted inside a Pod. This the default behavior.  - `\"OnRootMismatch\"` indicates that volume's ownership and permissions will be changed only when permission and ownership of root directory does not match with expected permissions on the volume. This can help shorten the time it takes to change ownership and permissions of a volume.
 * @member {module:model/IoK8sApiCoreV1PodSecurityContext.FsGroupChangePolicyEnum} fsGroupChangePolicy
 */
IoK8sApiCoreV1PodSecurityContext.prototype['fsGroupChangePolicy'] = undefined;

/**
 * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
 * @member {Number} runAsGroup
 */
IoK8sApiCoreV1PodSecurityContext.prototype['runAsGroup'] = undefined;

/**
 * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
 * @member {Boolean} runAsNonRoot
 */
IoK8sApiCoreV1PodSecurityContext.prototype['runAsNonRoot'] = undefined;

/**
 * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
 * @member {Number} runAsUser
 */
IoK8sApiCoreV1PodSecurityContext.prototype['runAsUser'] = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1SELinuxOptions} seLinuxOptions
 */
IoK8sApiCoreV1PodSecurityContext.prototype['seLinuxOptions'] = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1SeccompProfile} seccompProfile
 */
IoK8sApiCoreV1PodSecurityContext.prototype['seccompProfile'] = undefined;

/**
 * A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
 * @member {Array.<Number>} supplementalGroups
 */
IoK8sApiCoreV1PodSecurityContext.prototype['supplementalGroups'] = undefined;

/**
 * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
 * @member {Array.<module:model/IoK8sApiCoreV1Sysctl>} sysctls
 */
IoK8sApiCoreV1PodSecurityContext.prototype['sysctls'] = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1WindowsSecurityContextOptions} windowsOptions
 */
IoK8sApiCoreV1PodSecurityContext.prototype['windowsOptions'] = undefined;





/**
 * Allowed values for the <code>fsGroupChangePolicy</code> property.
 * @enum {String}
 * @readonly
 */
IoK8sApiCoreV1PodSecurityContext['FsGroupChangePolicyEnum'] = {

    /**
     * value: "Always"
     * @const
     */
    "Always": "Always",

    /**
     * value: "OnRootMismatch"
     * @const
     */
    "OnRootMismatch": "OnRootMismatch"
};



export default IoK8sApiCoreV1PodSecurityContext;

