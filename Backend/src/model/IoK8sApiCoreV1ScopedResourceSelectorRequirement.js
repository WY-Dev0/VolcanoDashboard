/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IoK8sApiCoreV1ScopedResourceSelectorRequirement model module.
 * @module model/IoK8sApiCoreV1ScopedResourceSelectorRequirement
 * @version v1.30.0
 */
class IoK8sApiCoreV1ScopedResourceSelectorRequirement {
    /**
     * Constructs a new <code>IoK8sApiCoreV1ScopedResourceSelectorRequirement</code>.
     * A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.
     * @alias module:model/IoK8sApiCoreV1ScopedResourceSelectorRequirement
     * @param operator {module:model/IoK8sApiCoreV1ScopedResourceSelectorRequirement.OperatorEnum} Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.  Possible enum values:  - `\"DoesNotExist\"`  - `\"Exists\"`  - `\"In\"`  - `\"NotIn\"`
     * @param scopeName {module:model/IoK8sApiCoreV1ScopedResourceSelectorRequirement.ScopeNameEnum} The name of the scope that the selector applies to.  Possible enum values:  - `\"BestEffort\"` Match all pod objects that have best effort quality of service  - `\"CrossNamespacePodAffinity\"` Match all pod objects that have cross-namespace pod (anti)affinity mentioned.  - `\"NotBestEffort\"` Match all pod objects that do not have best effort quality of service  - `\"NotTerminating\"` Match all pod objects where spec.activeDeadlineSeconds is nil  - `\"PriorityClass\"` Match all pod objects that have priority class mentioned  - `\"Terminating\"` Match all pod objects where spec.activeDeadlineSeconds >=0
     */
    constructor(operator, scopeName) { 
        
        IoK8sApiCoreV1ScopedResourceSelectorRequirement.initialize(this, operator, scopeName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, operator, scopeName) { 
        obj['operator'] = operator;
        obj['scopeName'] = scopeName;
    }

    /**
     * Constructs a <code>IoK8sApiCoreV1ScopedResourceSelectorRequirement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IoK8sApiCoreV1ScopedResourceSelectorRequirement} obj Optional instance to populate.
     * @return {module:model/IoK8sApiCoreV1ScopedResourceSelectorRequirement} The populated <code>IoK8sApiCoreV1ScopedResourceSelectorRequirement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IoK8sApiCoreV1ScopedResourceSelectorRequirement();

            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
            if (data.hasOwnProperty('scopeName')) {
                obj['scopeName'] = ApiClient.convertToType(data['scopeName'], 'String');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IoK8sApiCoreV1ScopedResourceSelectorRequirement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IoK8sApiCoreV1ScopedResourceSelectorRequirement</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IoK8sApiCoreV1ScopedResourceSelectorRequirement.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }
        // ensure the json data is a string
        if (data['scopeName'] && !(typeof data['scopeName'] === 'string' || data['scopeName'] instanceof String)) {
            throw new Error("Expected the field `scopeName` to be a primitive type in the JSON string but got " + data['scopeName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['values'])) {
            throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
        }

        return true;
    }


}

IoK8sApiCoreV1ScopedResourceSelectorRequirement.RequiredProperties = ["operator", "scopeName"];

/**
 * Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.  Possible enum values:  - `\"DoesNotExist\"`  - `\"Exists\"`  - `\"In\"`  - `\"NotIn\"`
 * @member {module:model/IoK8sApiCoreV1ScopedResourceSelectorRequirement.OperatorEnum} operator
 */
IoK8sApiCoreV1ScopedResourceSelectorRequirement.prototype['operator'] = undefined;

/**
 * The name of the scope that the selector applies to.  Possible enum values:  - `\"BestEffort\"` Match all pod objects that have best effort quality of service  - `\"CrossNamespacePodAffinity\"` Match all pod objects that have cross-namespace pod (anti)affinity mentioned.  - `\"NotBestEffort\"` Match all pod objects that do not have best effort quality of service  - `\"NotTerminating\"` Match all pod objects where spec.activeDeadlineSeconds is nil  - `\"PriorityClass\"` Match all pod objects that have priority class mentioned  - `\"Terminating\"` Match all pod objects where spec.activeDeadlineSeconds >=0
 * @member {module:model/IoK8sApiCoreV1ScopedResourceSelectorRequirement.ScopeNameEnum} scopeName
 */
IoK8sApiCoreV1ScopedResourceSelectorRequirement.prototype['scopeName'] = undefined;

/**
 * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
 * @member {Array.<String>} values
 */
IoK8sApiCoreV1ScopedResourceSelectorRequirement.prototype['values'] = undefined;





/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
IoK8sApiCoreV1ScopedResourceSelectorRequirement['OperatorEnum'] = {

    /**
     * value: "DoesNotExist"
     * @const
     */
    "DoesNotExist": "DoesNotExist",

    /**
     * value: "Exists"
     * @const
     */
    "Exists": "Exists",

    /**
     * value: "In"
     * @const
     */
    "In": "In",

    /**
     * value: "NotIn"
     * @const
     */
    "NotIn": "NotIn"
};


/**
 * Allowed values for the <code>scopeName</code> property.
 * @enum {String}
 * @readonly
 */
IoK8sApiCoreV1ScopedResourceSelectorRequirement['ScopeNameEnum'] = {

    /**
     * value: "BestEffort"
     * @const
     */
    "BestEffort": "BestEffort",

    /**
     * value: "CrossNamespacePodAffinity"
     * @const
     */
    "CrossNamespacePodAffinity": "CrossNamespacePodAffinity",

    /**
     * value: "NotBestEffort"
     * @const
     */
    "NotBestEffort": "NotBestEffort",

    /**
     * value: "NotTerminating"
     * @const
     */
    "NotTerminating": "NotTerminating",

    /**
     * value: "PriorityClass"
     * @const
     */
    "PriorityClass": "PriorityClass",

    /**
     * value: "Terminating"
     * @const
     */
    "Terminating": "Terminating"
};



export default IoK8sApiCoreV1ScopedResourceSelectorRequirement;

