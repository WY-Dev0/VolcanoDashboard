/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IoK8sApiCoreV1ModifyVolumeStatus from './IoK8sApiCoreV1ModifyVolumeStatus';
import IoK8sApiCoreV1PersistentVolumeClaimCondition from './IoK8sApiCoreV1PersistentVolumeClaimCondition';

/**
 * The IoK8sApiCoreV1PersistentVolumeClaimStatus model module.
 * @module model/IoK8sApiCoreV1PersistentVolumeClaimStatus
 * @version v1.30.0
 */
class IoK8sApiCoreV1PersistentVolumeClaimStatus {
    /**
     * Constructs a new <code>IoK8sApiCoreV1PersistentVolumeClaimStatus</code>.
     * PersistentVolumeClaimStatus is the current status of a persistent volume claim.
     * @alias module:model/IoK8sApiCoreV1PersistentVolumeClaimStatus
     */
    constructor() { 
        
        IoK8sApiCoreV1PersistentVolumeClaimStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IoK8sApiCoreV1PersistentVolumeClaimStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IoK8sApiCoreV1PersistentVolumeClaimStatus} obj Optional instance to populate.
     * @return {module:model/IoK8sApiCoreV1PersistentVolumeClaimStatus} The populated <code>IoK8sApiCoreV1PersistentVolumeClaimStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IoK8sApiCoreV1PersistentVolumeClaimStatus();

            if (data.hasOwnProperty('accessModes')) {
                obj['accessModes'] = ApiClient.convertToType(data['accessModes'], ['String']);
            }
            if (data.hasOwnProperty('allocatedResourceStatuses')) {
                obj['allocatedResourceStatuses'] = ApiClient.convertToType(data['allocatedResourceStatuses'], {'String': 'String'});
            }
            if (data.hasOwnProperty('allocatedResources')) {
                obj['allocatedResources'] = ApiClient.convertToType(data['allocatedResources'], {'String': 'String'});
            }
            if (data.hasOwnProperty('capacity')) {
                obj['capacity'] = ApiClient.convertToType(data['capacity'], {'String': 'String'});
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], [IoK8sApiCoreV1PersistentVolumeClaimCondition]);
            }
            if (data.hasOwnProperty('currentVolumeAttributesClassName')) {
                obj['currentVolumeAttributesClassName'] = ApiClient.convertToType(data['currentVolumeAttributesClassName'], 'String');
            }
            if (data.hasOwnProperty('modifyVolumeStatus')) {
                obj['modifyVolumeStatus'] = IoK8sApiCoreV1ModifyVolumeStatus.constructFromObject(data['modifyVolumeStatus']);
            }
            if (data.hasOwnProperty('phase')) {
                obj['phase'] = ApiClient.convertToType(data['phase'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IoK8sApiCoreV1PersistentVolumeClaimStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IoK8sApiCoreV1PersistentVolumeClaimStatus</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['accessModes'])) {
            throw new Error("Expected the field `accessModes` to be an array in the JSON data but got " + data['accessModes']);
        }
        if (data['conditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conditions'])) {
                throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
            }
            // validate the optional field `conditions` (array)
            for (const item of data['conditions']) {
                IoK8sApiCoreV1PersistentVolumeClaimCondition.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['currentVolumeAttributesClassName'] && !(typeof data['currentVolumeAttributesClassName'] === 'string' || data['currentVolumeAttributesClassName'] instanceof String)) {
            throw new Error("Expected the field `currentVolumeAttributesClassName` to be a primitive type in the JSON string but got " + data['currentVolumeAttributesClassName']);
        }
        // validate the optional field `modifyVolumeStatus`
        if (data['modifyVolumeStatus']) { // data not null
          IoK8sApiCoreV1ModifyVolumeStatus.validateJSON(data['modifyVolumeStatus']);
        }
        // ensure the json data is a string
        if (data['phase'] && !(typeof data['phase'] === 'string' || data['phase'] instanceof String)) {
            throw new Error("Expected the field `phase` to be a primitive type in the JSON string but got " + data['phase']);
        }

        return true;
    }


}



/**
 * accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
 * @member {Array.<module:model/IoK8sApiCoreV1PersistentVolumeClaimStatus.AccessModesEnum>} accessModes
 */
IoK8sApiCoreV1PersistentVolumeClaimStatus.prototype['accessModes'] = undefined;

/**
 * allocatedResourceStatuses stores status of resource being resized for the given PVC. Key names follow standard Kubernetes label syntax. Valid values are either:  * Un-prefixed keys:   - storage - the capacity of the volume.  * Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\" Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.  ClaimResourceStatus can be in any of following states:  - ControllerResizeInProgress:   State set when resize controller starts resizing the volume in control-plane.  - ControllerResizeFailed:   State set when resize has failed in resize controller with a terminal error.  - NodeResizePending:   State set when resize controller has finished resizing the volume but further resizing of   volume is needed on the node.  - NodeResizeInProgress:   State set when kubelet starts resizing the volume.  - NodeResizeFailed:   State set when resizing has failed in kubelet with a terminal error. Transient errors don't set   NodeResizeFailed. For example: if expanding a PVC for more capacity - this field can be one of the following states:  - pvc.status.allocatedResourceStatus['storage'] = \"ControllerResizeInProgress\"      - pvc.status.allocatedResourceStatus['storage'] = \"ControllerResizeFailed\"      - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizePending\"      - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizeInProgress\"      - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizeFailed\" When this field is not set, it means that no resize operation is in progress for the given PVC.  A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.  This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
 * @member {Object.<String, module:model/IoK8sApiCoreV1PersistentVolumeClaimStatus.InnerEnum>} allocatedResourceStatuses
 */
IoK8sApiCoreV1PersistentVolumeClaimStatus.prototype['allocatedResourceStatuses'] = undefined;

/**
 * allocatedResources tracks the resources allocated to a PVC including its capacity. Key names follow standard Kubernetes label syntax. Valid values are either:  * Un-prefixed keys:   - storage - the capacity of the volume.  * Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\" Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.  Capacity reported here may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity.  A controller that receives PVC update with previously unknown resourceName should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.  This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
 * @member {Object.<String, String>} allocatedResources
 */
IoK8sApiCoreV1PersistentVolumeClaimStatus.prototype['allocatedResources'] = undefined;

/**
 * capacity represents the actual resources of the underlying volume.
 * @member {Object.<String, String>} capacity
 */
IoK8sApiCoreV1PersistentVolumeClaimStatus.prototype['capacity'] = undefined;

/**
 * conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'Resizing'.
 * @member {Array.<module:model/IoK8sApiCoreV1PersistentVolumeClaimCondition>} conditions
 */
IoK8sApiCoreV1PersistentVolumeClaimStatus.prototype['conditions'] = undefined;

/**
 * currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using. When unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim This is an alpha field and requires enabling VolumeAttributesClass feature.
 * @member {String} currentVolumeAttributesClassName
 */
IoK8sApiCoreV1PersistentVolumeClaimStatus.prototype['currentVolumeAttributesClassName'] = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1ModifyVolumeStatus} modifyVolumeStatus
 */
IoK8sApiCoreV1PersistentVolumeClaimStatus.prototype['modifyVolumeStatus'] = undefined;

/**
 * phase represents the current phase of PersistentVolumeClaim.  Possible enum values:  - `\"Bound\"` used for PersistentVolumeClaims that are bound  - `\"Lost\"` used for PersistentVolumeClaims that lost their underlying PersistentVolume. The claim was bound to a PersistentVolume and this volume does not exist any longer and all data on it was lost.  - `\"Pending\"` used for PersistentVolumeClaims that are not yet bound
 * @member {module:model/IoK8sApiCoreV1PersistentVolumeClaimStatus.PhaseEnum} phase
 */
IoK8sApiCoreV1PersistentVolumeClaimStatus.prototype['phase'] = undefined;





/**
 * Allowed values for the <code>accessModes</code> property.
 * @enum {String}
 * @readonly
 */
IoK8sApiCoreV1PersistentVolumeClaimStatus['AccessModesEnum'] = {

    /**
     * value: "ReadOnlyMany"
     * @const
     */
    "ReadOnlyMany": "ReadOnlyMany",

    /**
     * value: "ReadWriteMany"
     * @const
     */
    "ReadWriteMany": "ReadWriteMany",

    /**
     * value: "ReadWriteOnce"
     * @const
     */
    "ReadWriteOnce": "ReadWriteOnce",

    /**
     * value: "ReadWriteOncePod"
     * @const
     */
    "ReadWriteOncePod": "ReadWriteOncePod"
};


/**
 * Allowed values for the <code>inner</code> property.
 * @enum {String}
 * @readonly
 */
IoK8sApiCoreV1PersistentVolumeClaimStatus['InnerEnum'] = {

    /**
     * value: "ControllerResizeFailed"
     * @const
     */
    "ControllerResizeFailed": "ControllerResizeFailed",

    /**
     * value: "ControllerResizeInProgress"
     * @const
     */
    "ControllerResizeInProgress": "ControllerResizeInProgress",

    /**
     * value: "NodeResizeFailed"
     * @const
     */
    "NodeResizeFailed": "NodeResizeFailed",

    /**
     * value: "NodeResizeInProgress"
     * @const
     */
    "NodeResizeInProgress": "NodeResizeInProgress",

    /**
     * value: "NodeResizePending"
     * @const
     */
    "NodeResizePending": "NodeResizePending"
};


/**
 * Allowed values for the <code>phase</code> property.
 * @enum {String}
 * @readonly
 */
IoK8sApiCoreV1PersistentVolumeClaimStatus['PhaseEnum'] = {

    /**
     * value: "Bound"
     * @const
     */
    "Bound": "Bound",

    /**
     * value: "Lost"
     * @const
     */
    "Lost": "Lost",

    /**
     * value: "Pending"
     * @const
     */
    "Pending": "Pending"
};



export default IoK8sApiCoreV1PersistentVolumeClaimStatus;

