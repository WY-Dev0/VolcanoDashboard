/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IoK8sApiCoreV1PodDNSConfigOption from './IoK8sApiCoreV1PodDNSConfigOption';

/**
 * The IoK8sApiCoreV1PodDNSConfig model module.
 * @module model/IoK8sApiCoreV1PodDNSConfig
 * @version v1.30.0
 */
class IoK8sApiCoreV1PodDNSConfig {
    /**
     * Constructs a new <code>IoK8sApiCoreV1PodDNSConfig</code>.
     * PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
     * @alias module:model/IoK8sApiCoreV1PodDNSConfig
     */
    constructor() { 
        
        IoK8sApiCoreV1PodDNSConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IoK8sApiCoreV1PodDNSConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IoK8sApiCoreV1PodDNSConfig} obj Optional instance to populate.
     * @return {module:model/IoK8sApiCoreV1PodDNSConfig} The populated <code>IoK8sApiCoreV1PodDNSConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IoK8sApiCoreV1PodDNSConfig();

            if (data.hasOwnProperty('nameservers')) {
                obj['nameservers'] = ApiClient.convertToType(data['nameservers'], ['String']);
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], [IoK8sApiCoreV1PodDNSConfigOption]);
            }
            if (data.hasOwnProperty('searches')) {
                obj['searches'] = ApiClient.convertToType(data['searches'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IoK8sApiCoreV1PodDNSConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IoK8sApiCoreV1PodDNSConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['nameservers'])) {
            throw new Error("Expected the field `nameservers` to be an array in the JSON data but got " + data['nameservers']);
        }
        if (data['options']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['options'])) {
                throw new Error("Expected the field `options` to be an array in the JSON data but got " + data['options']);
            }
            // validate the optional field `options` (array)
            for (const item of data['options']) {
                IoK8sApiCoreV1PodDNSConfigOption.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['searches'])) {
            throw new Error("Expected the field `searches` to be an array in the JSON data but got " + data['searches']);
        }

        return true;
    }


}



/**
 * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
 * @member {Array.<String>} nameservers
 */
IoK8sApiCoreV1PodDNSConfig.prototype['nameservers'] = undefined;

/**
 * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
 * @member {Array.<module:model/IoK8sApiCoreV1PodDNSConfigOption>} options
 */
IoK8sApiCoreV1PodDNSConfig.prototype['options'] = undefined;

/**
 * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
 * @member {Array.<String>} searches
 */
IoK8sApiCoreV1PodDNSConfig.prototype['searches'] = undefined;






export default IoK8sApiCoreV1PodDNSConfig;

