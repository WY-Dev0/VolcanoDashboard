/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IoK8sApiCoreV1ContainerState from './IoK8sApiCoreV1ContainerState';
import IoK8sApiCoreV1ResourceRequirements from './IoK8sApiCoreV1ResourceRequirements';
import IoK8sApiCoreV1VolumeMountStatus from './IoK8sApiCoreV1VolumeMountStatus';

/**
 * The IoK8sApiCoreV1ContainerStatus model module.
 * @module model/IoK8sApiCoreV1ContainerStatus
 * @version v1.30.0
 */
class IoK8sApiCoreV1ContainerStatus {
    /**
     * Constructs a new <code>IoK8sApiCoreV1ContainerStatus</code>.
     * ContainerStatus contains details for the current status of this container.
     * @alias module:model/IoK8sApiCoreV1ContainerStatus
     * @param image {String} Image is the name of container image that the container is running. The container image may not match the image used in the PodSpec, as it may have been resolved by the runtime. More info: https://kubernetes.io/docs/concepts/containers/images.
     * @param imageID {String} ImageID is the image ID of the container's image. The image ID may not match the image ID of the image used in the PodSpec, as it may have been resolved by the runtime.
     * @param name {String} Name is a DNS_LABEL representing the unique name of the container. Each container in a pod must have a unique name across all container types. Cannot be updated.
     * @param ready {Boolean} Ready specifies whether the container is currently passing its readiness check. The value will change as readiness probes keep executing. If no readiness probes are specified, this field defaults to true once the container is fully started (see Started field).  The value is typically used to determine whether a container is ready to accept traffic.
     * @param restartCount {Number} RestartCount holds the number of times the container has been restarted. Kubelet makes an effort to always increment the value, but there are cases when the state may be lost due to node restarts and then the value may be reset to 0. The value is never negative.
     */
    constructor(image, imageID, name, ready, restartCount) { 
        
        IoK8sApiCoreV1ContainerStatus.initialize(this, image, imageID, name, ready, restartCount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, image, imageID, name, ready, restartCount) { 
        obj['image'] = image;
        obj['imageID'] = imageID;
        obj['name'] = name;
        obj['ready'] = ready;
        obj['restartCount'] = restartCount;
    }

    /**
     * Constructs a <code>IoK8sApiCoreV1ContainerStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IoK8sApiCoreV1ContainerStatus} obj Optional instance to populate.
     * @return {module:model/IoK8sApiCoreV1ContainerStatus} The populated <code>IoK8sApiCoreV1ContainerStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IoK8sApiCoreV1ContainerStatus();

            if (data.hasOwnProperty('allocatedResources')) {
                obj['allocatedResources'] = ApiClient.convertToType(data['allocatedResources'], {'String': 'String'});
            }
            if (data.hasOwnProperty('containerID')) {
                obj['containerID'] = ApiClient.convertToType(data['containerID'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('imageID')) {
                obj['imageID'] = ApiClient.convertToType(data['imageID'], 'String');
            }
            if (data.hasOwnProperty('lastState')) {
                obj['lastState'] = IoK8sApiCoreV1ContainerState.constructFromObject(data['lastState']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ready')) {
                obj['ready'] = ApiClient.convertToType(data['ready'], 'Boolean');
            }
            if (data.hasOwnProperty('resources')) {
                obj['resources'] = IoK8sApiCoreV1ResourceRequirements.constructFromObject(data['resources']);
            }
            if (data.hasOwnProperty('restartCount')) {
                obj['restartCount'] = ApiClient.convertToType(data['restartCount'], 'Number');
            }
            if (data.hasOwnProperty('started')) {
                obj['started'] = ApiClient.convertToType(data['started'], 'Boolean');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = IoK8sApiCoreV1ContainerState.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('volumeMounts')) {
                obj['volumeMounts'] = ApiClient.convertToType(data['volumeMounts'], [IoK8sApiCoreV1VolumeMountStatus]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IoK8sApiCoreV1ContainerStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IoK8sApiCoreV1ContainerStatus</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IoK8sApiCoreV1ContainerStatus.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['containerID'] && !(typeof data['containerID'] === 'string' || data['containerID'] instanceof String)) {
            throw new Error("Expected the field `containerID` to be a primitive type in the JSON string but got " + data['containerID']);
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // ensure the json data is a string
        if (data['imageID'] && !(typeof data['imageID'] === 'string' || data['imageID'] instanceof String)) {
            throw new Error("Expected the field `imageID` to be a primitive type in the JSON string but got " + data['imageID']);
        }
        // validate the optional field `lastState`
        if (data['lastState']) { // data not null
          IoK8sApiCoreV1ContainerState.validateJSON(data['lastState']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `resources`
        if (data['resources']) { // data not null
          IoK8sApiCoreV1ResourceRequirements.validateJSON(data['resources']);
        }
        // validate the optional field `state`
        if (data['state']) { // data not null
          IoK8sApiCoreV1ContainerState.validateJSON(data['state']);
        }
        if (data['volumeMounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['volumeMounts'])) {
                throw new Error("Expected the field `volumeMounts` to be an array in the JSON data but got " + data['volumeMounts']);
            }
            // validate the optional field `volumeMounts` (array)
            for (const item of data['volumeMounts']) {
                IoK8sApiCoreV1VolumeMountStatus.validateJSON(item);
            };
        }

        return true;
    }


}

IoK8sApiCoreV1ContainerStatus.RequiredProperties = ["image", "imageID", "name", "ready", "restartCount"];

/**
 * AllocatedResources represents the compute resources allocated for this container by the node. Kubelet sets this value to Container.Resources.Requests upon successful pod admission and after successfully admitting desired pod resize.
 * @member {Object.<String, String>} allocatedResources
 */
IoK8sApiCoreV1ContainerStatus.prototype['allocatedResources'] = undefined;

/**
 * ContainerID is the ID of the container in the format '<type>://<container_id>'. Where type is a container runtime identifier, returned from Version call of CRI API (for example \"containerd\").
 * @member {String} containerID
 */
IoK8sApiCoreV1ContainerStatus.prototype['containerID'] = undefined;

/**
 * Image is the name of container image that the container is running. The container image may not match the image used in the PodSpec, as it may have been resolved by the runtime. More info: https://kubernetes.io/docs/concepts/containers/images.
 * @member {String} image
 */
IoK8sApiCoreV1ContainerStatus.prototype['image'] = undefined;

/**
 * ImageID is the image ID of the container's image. The image ID may not match the image ID of the image used in the PodSpec, as it may have been resolved by the runtime.
 * @member {String} imageID
 */
IoK8sApiCoreV1ContainerStatus.prototype['imageID'] = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1ContainerState} lastState
 */
IoK8sApiCoreV1ContainerStatus.prototype['lastState'] = undefined;

/**
 * Name is a DNS_LABEL representing the unique name of the container. Each container in a pod must have a unique name across all container types. Cannot be updated.
 * @member {String} name
 */
IoK8sApiCoreV1ContainerStatus.prototype['name'] = undefined;

/**
 * Ready specifies whether the container is currently passing its readiness check. The value will change as readiness probes keep executing. If no readiness probes are specified, this field defaults to true once the container is fully started (see Started field).  The value is typically used to determine whether a container is ready to accept traffic.
 * @member {Boolean} ready
 */
IoK8sApiCoreV1ContainerStatus.prototype['ready'] = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1ResourceRequirements} resources
 */
IoK8sApiCoreV1ContainerStatus.prototype['resources'] = undefined;

/**
 * RestartCount holds the number of times the container has been restarted. Kubelet makes an effort to always increment the value, but there are cases when the state may be lost due to node restarts and then the value may be reset to 0. The value is never negative.
 * @member {Number} restartCount
 */
IoK8sApiCoreV1ContainerStatus.prototype['restartCount'] = undefined;

/**
 * Started indicates whether the container has finished its postStart lifecycle hook and passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. In both cases, startup probes will run again. Is always true when no startupProbe is defined and container is running and has passed the postStart lifecycle hook. The null value must be treated the same as false.
 * @member {Boolean} started
 */
IoK8sApiCoreV1ContainerStatus.prototype['started'] = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1ContainerState} state
 */
IoK8sApiCoreV1ContainerStatus.prototype['state'] = undefined;

/**
 * Status of volume mounts.
 * @member {Array.<module:model/IoK8sApiCoreV1VolumeMountStatus>} volumeMounts
 */
IoK8sApiCoreV1ContainerStatus.prototype['volumeMounts'] = undefined;






export default IoK8sApiCoreV1ContainerStatus;

