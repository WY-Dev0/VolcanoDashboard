/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IoK8sApiCoreV1AttachedVolume from './IoK8sApiCoreV1AttachedVolume';
import IoK8sApiCoreV1ContainerImage from './IoK8sApiCoreV1ContainerImage';
import IoK8sApiCoreV1NodeAddress from './IoK8sApiCoreV1NodeAddress';
import IoK8sApiCoreV1NodeCondition from './IoK8sApiCoreV1NodeCondition';
import IoK8sApiCoreV1NodeConfigStatus from './IoK8sApiCoreV1NodeConfigStatus';
import IoK8sApiCoreV1NodeDaemonEndpoints from './IoK8sApiCoreV1NodeDaemonEndpoints';
import IoK8sApiCoreV1NodeRuntimeHandler from './IoK8sApiCoreV1NodeRuntimeHandler';
import IoK8sApiCoreV1NodeSystemInfo from './IoK8sApiCoreV1NodeSystemInfo';

/**
 * The IoK8sApiCoreV1NodeStatus model module.
 * @module model/IoK8sApiCoreV1NodeStatus
 * @version v1.30.0
 */
class IoK8sApiCoreV1NodeStatus {
    /**
     * Constructs a new <code>IoK8sApiCoreV1NodeStatus</code>.
     * NodeStatus is information about the current status of a node.
     * @alias module:model/IoK8sApiCoreV1NodeStatus
     */
    constructor() { 
        
        IoK8sApiCoreV1NodeStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IoK8sApiCoreV1NodeStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IoK8sApiCoreV1NodeStatus} obj Optional instance to populate.
     * @return {module:model/IoK8sApiCoreV1NodeStatus} The populated <code>IoK8sApiCoreV1NodeStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IoK8sApiCoreV1NodeStatus();

            if (data.hasOwnProperty('addresses')) {
                obj['addresses'] = ApiClient.convertToType(data['addresses'], [IoK8sApiCoreV1NodeAddress]);
            }
            if (data.hasOwnProperty('allocatable')) {
                obj['allocatable'] = ApiClient.convertToType(data['allocatable'], {'String': 'String'});
            }
            if (data.hasOwnProperty('capacity')) {
                obj['capacity'] = ApiClient.convertToType(data['capacity'], {'String': 'String'});
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], [IoK8sApiCoreV1NodeCondition]);
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = IoK8sApiCoreV1NodeConfigStatus.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('daemonEndpoints')) {
                obj['daemonEndpoints'] = IoK8sApiCoreV1NodeDaemonEndpoints.constructFromObject(data['daemonEndpoints']);
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [IoK8sApiCoreV1ContainerImage]);
            }
            if (data.hasOwnProperty('nodeInfo')) {
                obj['nodeInfo'] = IoK8sApiCoreV1NodeSystemInfo.constructFromObject(data['nodeInfo']);
            }
            if (data.hasOwnProperty('phase')) {
                obj['phase'] = ApiClient.convertToType(data['phase'], 'String');
            }
            if (data.hasOwnProperty('runtimeHandlers')) {
                obj['runtimeHandlers'] = ApiClient.convertToType(data['runtimeHandlers'], [IoK8sApiCoreV1NodeRuntimeHandler]);
            }
            if (data.hasOwnProperty('volumesAttached')) {
                obj['volumesAttached'] = ApiClient.convertToType(data['volumesAttached'], [IoK8sApiCoreV1AttachedVolume]);
            }
            if (data.hasOwnProperty('volumesInUse')) {
                obj['volumesInUse'] = ApiClient.convertToType(data['volumesInUse'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IoK8sApiCoreV1NodeStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IoK8sApiCoreV1NodeStatus</code>.
     */
    static validateJSON(data) {
        if (data['addresses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['addresses'])) {
                throw new Error("Expected the field `addresses` to be an array in the JSON data but got " + data['addresses']);
            }
            // validate the optional field `addresses` (array)
            for (const item of data['addresses']) {
                IoK8sApiCoreV1NodeAddress.validateJSON(item);
            };
        }
        if (data['conditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conditions'])) {
                throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
            }
            // validate the optional field `conditions` (array)
            for (const item of data['conditions']) {
                IoK8sApiCoreV1NodeCondition.validateJSON(item);
            };
        }
        // validate the optional field `config`
        if (data['config']) { // data not null
          IoK8sApiCoreV1NodeConfigStatus.validateJSON(data['config']);
        }
        // validate the optional field `daemonEndpoints`
        if (data['daemonEndpoints']) { // data not null
          IoK8sApiCoreV1NodeDaemonEndpoints.validateJSON(data['daemonEndpoints']);
        }
        if (data['images']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['images'])) {
                throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
            }
            // validate the optional field `images` (array)
            for (const item of data['images']) {
                IoK8sApiCoreV1ContainerImage.validateJSON(item);
            };
        }
        // validate the optional field `nodeInfo`
        if (data['nodeInfo']) { // data not null
          IoK8sApiCoreV1NodeSystemInfo.validateJSON(data['nodeInfo']);
        }
        // ensure the json data is a string
        if (data['phase'] && !(typeof data['phase'] === 'string' || data['phase'] instanceof String)) {
            throw new Error("Expected the field `phase` to be a primitive type in the JSON string but got " + data['phase']);
        }
        if (data['runtimeHandlers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['runtimeHandlers'])) {
                throw new Error("Expected the field `runtimeHandlers` to be an array in the JSON data but got " + data['runtimeHandlers']);
            }
            // validate the optional field `runtimeHandlers` (array)
            for (const item of data['runtimeHandlers']) {
                IoK8sApiCoreV1NodeRuntimeHandler.validateJSON(item);
            };
        }
        if (data['volumesAttached']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['volumesAttached'])) {
                throw new Error("Expected the field `volumesAttached` to be an array in the JSON data but got " + data['volumesAttached']);
            }
            // validate the optional field `volumesAttached` (array)
            for (const item of data['volumesAttached']) {
                IoK8sApiCoreV1AttachedVolume.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['volumesInUse'])) {
            throw new Error("Expected the field `volumesInUse` to be an array in the JSON data but got " + data['volumesInUse']);
        }

        return true;
    }


}



/**
 * List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See https://pr.k8s.io/79391 for an example. Consumers should assume that addresses can change during the lifetime of a Node. However, there are some exceptions where this may not be possible, such as Pods that inherit a Node's address in its own status or consumers of the downward API (status.hostIP).
 * @member {Array.<module:model/IoK8sApiCoreV1NodeAddress>} addresses
 */
IoK8sApiCoreV1NodeStatus.prototype['addresses'] = undefined;

/**
 * Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
 * @member {Object.<String, String>} allocatable
 */
IoK8sApiCoreV1NodeStatus.prototype['allocatable'] = undefined;

/**
 * Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
 * @member {Object.<String, String>} capacity
 */
IoK8sApiCoreV1NodeStatus.prototype['capacity'] = undefined;

/**
 * Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
 * @member {Array.<module:model/IoK8sApiCoreV1NodeCondition>} conditions
 */
IoK8sApiCoreV1NodeStatus.prototype['conditions'] = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1NodeConfigStatus} config
 */
IoK8sApiCoreV1NodeStatus.prototype['config'] = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1NodeDaemonEndpoints} daemonEndpoints
 */
IoK8sApiCoreV1NodeStatus.prototype['daemonEndpoints'] = undefined;

/**
 * List of container images on this node
 * @member {Array.<module:model/IoK8sApiCoreV1ContainerImage>} images
 */
IoK8sApiCoreV1NodeStatus.prototype['images'] = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1NodeSystemInfo} nodeInfo
 */
IoK8sApiCoreV1NodeStatus.prototype['nodeInfo'] = undefined;

/**
 * NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.  Possible enum values:  - `\"Pending\"` means the node has been created/added by the system, but not configured.  - `\"Running\"` means the node has been configured and has Kubernetes components running.  - `\"Terminated\"` means the node has been removed from the cluster.
 * @member {module:model/IoK8sApiCoreV1NodeStatus.PhaseEnum} phase
 */
IoK8sApiCoreV1NodeStatus.prototype['phase'] = undefined;

/**
 * The available runtime handlers.
 * @member {Array.<module:model/IoK8sApiCoreV1NodeRuntimeHandler>} runtimeHandlers
 */
IoK8sApiCoreV1NodeStatus.prototype['runtimeHandlers'] = undefined;

/**
 * List of volumes that are attached to the node.
 * @member {Array.<module:model/IoK8sApiCoreV1AttachedVolume>} volumesAttached
 */
IoK8sApiCoreV1NodeStatus.prototype['volumesAttached'] = undefined;

/**
 * List of attachable volumes in use (mounted) by the node.
 * @member {Array.<String>} volumesInUse
 */
IoK8sApiCoreV1NodeStatus.prototype['volumesInUse'] = undefined;





/**
 * Allowed values for the <code>phase</code> property.
 * @enum {String}
 * @readonly
 */
IoK8sApiCoreV1NodeStatus['PhaseEnum'] = {

    /**
     * value: "Pending"
     * @const
     */
    "Pending": "Pending",

    /**
     * value: "Running"
     * @const
     */
    "Running": "Running",

    /**
     * value: "Terminated"
     * @const
     */
    "Terminated": "Terminated"
};



export default IoK8sApiCoreV1NodeStatus;

