/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IoK8sApiStorageV1VolumeNodeResources from './IoK8sApiStorageV1VolumeNodeResources';

/**
 * The IoK8sApiStorageV1CSINodeDriver model module.
 * @module model/IoK8sApiStorageV1CSINodeDriver
 * @version v1.30.0
 */
class IoK8sApiStorageV1CSINodeDriver {
    /**
     * Constructs a new <code>IoK8sApiStorageV1CSINodeDriver</code>.
     * CSINodeDriver holds information about the specification of one CSI driver installed on a node
     * @alias module:model/IoK8sApiStorageV1CSINodeDriver
     * @param name {String} name represents the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.
     * @param nodeID {String} nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as \"node1\", but the storage system may refer to the same node as \"nodeA\". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. \"nodeA\" instead of \"node1\". This field is required.
     */
    constructor(name, nodeID) { 
        
        IoK8sApiStorageV1CSINodeDriver.initialize(this, name, nodeID);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, nodeID) { 
        obj['name'] = name;
        obj['nodeID'] = nodeID;
    }

    /**
     * Constructs a <code>IoK8sApiStorageV1CSINodeDriver</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IoK8sApiStorageV1CSINodeDriver} obj Optional instance to populate.
     * @return {module:model/IoK8sApiStorageV1CSINodeDriver} The populated <code>IoK8sApiStorageV1CSINodeDriver</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IoK8sApiStorageV1CSINodeDriver();

            if (data.hasOwnProperty('allocatable')) {
                obj['allocatable'] = IoK8sApiStorageV1VolumeNodeResources.constructFromObject(data['allocatable']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nodeID')) {
                obj['nodeID'] = ApiClient.convertToType(data['nodeID'], 'String');
            }
            if (data.hasOwnProperty('topologyKeys')) {
                obj['topologyKeys'] = ApiClient.convertToType(data['topologyKeys'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IoK8sApiStorageV1CSINodeDriver</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IoK8sApiStorageV1CSINodeDriver</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IoK8sApiStorageV1CSINodeDriver.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `allocatable`
        if (data['allocatable']) { // data not null
          IoK8sApiStorageV1VolumeNodeResources.validateJSON(data['allocatable']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['nodeID'] && !(typeof data['nodeID'] === 'string' || data['nodeID'] instanceof String)) {
            throw new Error("Expected the field `nodeID` to be a primitive type in the JSON string but got " + data['nodeID']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['topologyKeys'])) {
            throw new Error("Expected the field `topologyKeys` to be an array in the JSON data but got " + data['topologyKeys']);
        }

        return true;
    }


}

IoK8sApiStorageV1CSINodeDriver.RequiredProperties = ["name", "nodeID"];

/**
 * @member {module:model/IoK8sApiStorageV1VolumeNodeResources} allocatable
 */
IoK8sApiStorageV1CSINodeDriver.prototype['allocatable'] = undefined;

/**
 * name represents the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.
 * @member {String} name
 */
IoK8sApiStorageV1CSINodeDriver.prototype['name'] = undefined;

/**
 * nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as \"node1\", but the storage system may refer to the same node as \"nodeA\". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. \"nodeA\" instead of \"node1\". This field is required.
 * @member {String} nodeID
 */
IoK8sApiStorageV1CSINodeDriver.prototype['nodeID'] = undefined;

/**
 * topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. \"company.com/zone\", \"company.com/region\"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.
 * @member {Array.<String>} topologyKeys
 */
IoK8sApiStorageV1CSINodeDriver.prototype['topologyKeys'] = undefined;






export default IoK8sApiStorageV1CSINodeDriver;

